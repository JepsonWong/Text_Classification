软件学报
JOURNAL OF SOFTWARE
1999年 第10卷 第12期  Vol.10 No.12 1999



一个计算凸多面体间碰撞点的快速算法
王兆其　赵沁平　汪成为
摘要　计算两个物体之间的碰撞点是碰撞响应的基础，也是一项系统开销很大的任务.因此，研究碰撞点快速求解算法对碰撞响应的实时性具有重要意义.该文提出了一个算法，当在虚拟环境中检测到碰撞时，应用此算法可以在碰撞响应之前快速计算出两个物体之间的准确碰撞时间，并能计算出此时两个物体之间的碰撞点.
关键词　碰撞点，碰撞响应，碰撞检测，虚拟现实.
中图法分类号　TP391
A Fast Algorithm to Calculate Collision Point Between Convex Polygons
WANG Zhao-qi1　ZHAO Qin-ping2　WANG Cheng-wei3
　1(Institute of Computing Technology The Chinese Academy of Sciences Beijing 100080)
　2(Department of Computer Science and Engineering Beijing University of Aeronautics and Astronautics Beijing 100083)
　3(Science and Technology Committee General Department PLA Beijing 100034)
Abstract　 Collision point is basic information to physically-based collision response, but collision point finding is a burden task, which make real-time collision response very difficult. In this paper, the authors give an algorithm to find the very fast collision time and the collision points between two objects represented by convex polygon prior to collision response.
Key words　Collision point, collision response, collision detection, virtual reality.
　　当在虚拟环境中检测到两个物体碰撞后，进行碰撞响应之前，需要获知以下信息［1］：① 两个物体之间的准确碰撞时间；② 碰撞时两个物体之间的所有碰撞点.
　　在已有的一些方法［2,3］中，常用检测到的碰撞时间作为发生碰撞的时间.实际上，这两者之间存在着差别.如图1所示，在ti时刻，如图1(a)所示，O1与O2分离；在t′时刻，如图1(b)所示，O1与O2开始接触，其中ti<t′<ti+1；在ti+1时刻，如图1(c)所示，O1与O2之间发生了穿透.即当在ti+1时刻检测到碰撞时，早在t′时刻两个物体之间便发生了碰撞.当碰撞检测的时间步长dt=(ti+1-ti)较大时，得到的碰撞时间误差也会较大，从而引起碰撞点计算结果很不准确.为了提高计算精度，常需要增加碰撞检测次数，这不利于实时碰撞响应的实现.另外，两个物体之间的碰撞点仅在两个物体开始接触时有意义，而当两个物体已经发生穿透时，求解两个物体之间的碰撞点是一个不确定性问题.因此，快速而准确地计算出物体之间的碰撞时间t′，并求解此时物体之间的碰撞点是进行实时碰撞响应的重要内容.

图1
　　James K. Hahn的方法［2］是将时间步长dt=(ti+1-ti)取值非常小，并假设dt时间区域内物体的角速度为0.取dt太小则难以满足虚拟环境的实时交互要求.取dt较大时，则不能假设物体的角速度为0.Madhav K. Ponamgi等人通过计算两个物体的最短距离来确定两个物体是否发生了碰撞［3］.当两个多面体的距离为0时，两个物体最早相交.为了保证每次检测到的碰撞物体之间的距离近似为0，我们仍然需要减小时间步长dt，因此会影响碰撞响应的实时性.为了找到准确的碰撞时间与碰撞点，Harmut Keller等人将环境中的物体限制为规则几何体，如立方体、球体等，但这种方法的通用性受到了限制.
　　本文提出了一种计算凸多面体间碰撞时间与碰撞点的快速算法FCPF(fast collision points finding).当检测到虚拟环境中某两个物体间在ti+1时刻发生了碰撞时，FCPF算法可以根据两个物体的速度v1，v2和角速度ω1，ω2快速计算出两物体间最早发生碰撞的时间t′，并找出此时两个物体之间的所有碰撞点.
1　计算凸多面体间碰撞点的FCPF算法
1.1　基本假设
　　假设O1与O2是虚拟环境中的两个凸多面体，O1与O2在t0时刻不碰撞，而在t1时刻碰撞，且在(t0，t1］内两个物体只发生一次碰撞.设O1与O2中心的线速度分别为v1和v2，角速度分别为ω1和ω2.假设v1，v2，ω1和ω2在(t0，t1］ 时间内均为常向量.
1.2　理论基础
　　定义1. 当给一个平面F指定一个法向量n后，这个平面称为有向平面.其法向量所指的一面称为该平面的正面，另一面称为负面.对于多面体的面，我们作如下约定，其法向量均指向多面体的外部.
　　定理1. O1与O2是符合第1.1节中基本假设的两个多面体.设l=P1P2是O1的一条边，F是O2的一个面，l与F在(t0，t1］内相交，则l与F最早相交时刻tc∈(t0，t1］，且最早相交必是下列情形之一，如图2所示.

图2
　　(1) l的一个端点Pi与F的内部相交(l不与F的边相交)；
　　(2) l与F的一条边相交于一点P；
　　(3) l与F相交于一线段P1′P2′.
　　定理2. O1与O2是符合第1.1节中基本假设的两个多面体，最早相交时刻为Tc∈(t0，t1］.设l=P1P2是O1的一条边，F是O2的一个面.如果l与F在(t0，t1］内的最早相交时刻为tc，则必有tc≥Tc.若tc>Tc，则：
　　(1) 如果l=P1P2的一个端点Pi（i=1,2）最早在tc时刻与面F相交于F内部，则：
　　〈a〉 当l的另一顶点Pj位于F正面时，则O1在顶点Pi处的其他邻边中必有一条边l′，与F的最早相交时刻tc′<tc；
　　〈b〉 当l的另一顶点Pj位于F负面时，则O2中存在另一个面F′≠F，Pi与F′的最早相交时刻tc′<tc.
　　(2) 如果l最早在tc时刻与F的一条边l′相交于点P，则下列3种情形必有一种成立：
　　〈a〉 O2在P处存在一相邻的面F′≠F，l与F′的最早相交时刻tc′<tc；
　　〈b〉 O1在P处存在一相邻的面F′，l′与F′的最早相交时刻tc′<tc；
　　〈c〉 如果〈a〉与〈b〉都不成立，则l与l′相交于l的一个端点Pi，且l的另一端点Pj在O2于P处所有邻面的负面.此时O2存在一个面F′≠F，Pi与F′的最早相交时刻tc′<tc.
　　(3) 如果l最早于tc时刻与F相交于一条线段P1′P2′，则下列3种情形必有一成立：
　　〈a〉 O2在P1′或P2′处存在一个相邻的面F′，l与F′的最早相交时刻tc′<tc；
　　〈b〉 O2在P1′或P2′存在F的一条边l′，O1在l处存在一个相邻的面F′，l′与F′的最早相交时刻tc′<tc；
　　〈c〉 如果〈a〉与〈b〉都不成立，则必有一交点Pi′是l的端点，如Pi′=P1.存在O2的一个面F′≠F，P1与F′的最早相交时刻tc′<tc.
1.3　FCPF算法
　　当检测到虚拟环境中有两个物体之间发生了碰撞时，如果这两个物体分别由凸多面体O1与O2表示，则可以取到一个物体的一条边l与另一个物体的一个面F，设l∈O1，F∈O2，l与F相交.求l与F的最早相交时刻tc及l与F相交的情形.由定理1可知，l与F相交只可能有3种情形.根据每种情形，检测是否有使tc>Tc成立的情形，即是否有tc′<tc，O1与O2在tc′时刻相交.如果没有，则tc即是O1与O2的最早相交时刻Tc.否则，以tc′为新的tc，并寻找更小的tc′.求出Tc后，便可以求出两个多面体间所有相交的点，这些点即为两个多面体间的碰撞点.算法1给出了FCPF算法.
　　算法1. FCPF算法.
　　(1) 初始化：
　　tc=t1+1; ∥取一个比t1大的值
　　R=ψ;∥R 表示碰撞结果.含碰撞类型、碰撞点集等
　　S={〈l,F,O1〉};∥S中存放了尚需检测的情形，初始时为一个已知的边面相交实例
　　(2) 当S为空时，结束；
　　(3) 取出S的第1个元素e；
　　(4) 如果e=〈l,F,O1〉 ∥需求边与面的最早相交时刻
　　　　　　求O1中的l与O2中的F相交的最早时刻tc′;
　　　　　　如果tc′>tc,转(2);
　　　　　　如果tc′=tc,更新R（加入新的碰撞点）,转(2);∥此时无需修改S！
　　　　　　∥　tc′<tc,
　　　　　　tc=tc′;更新R；∥先清空R，再加入新的碰撞点
　　　　　　Case 1: ∥l的端点P1与F相交于F中央（不与F的边相交）
　　　　　　　　　　如果l的另一端点P2位于F正面
　　　　　　　　　　　　L={O1在P1处的边集}；
　　　　　　　　　　　　S={〈l,F,O1〉|l∈L};
　　　　　　　　　　否则：S={〈l,P2,O2〉}
　　　　　　Case 2: ∥l与F的一条边l′交于点P
　　　　　　　　　　Γ2={O2在P处的邻面}；
　　　　　　　　　　Γ1={O1在P处的邻面}；
　　　　　　　　　　如果交点P是l的一个顶点P1，且l的另一个顶点P2在P处O2所有邻面负面S′={〈l,P1,O2〉}
　　　　　　　　　　否则：S′=ψ;S={〈l,F,O1〉|F∈Γ2}∪{〈l′,F,O2〉|F∈Γ1}∪S′;
　　　　　　Case 3: ∥l 与F相交于一线段P1′P2′
　　　　　　　　　　设l与F的边l1相交于点P1′（若P1′是l与F内部的交点，则l1=ψ.此时，设P1′==P1）;
　　　　　　　　　　l与F的边l2相交于点P2′ （若P2′是l与F内部的交点，则l2=ψ.此时，设P2′==P2）;
　　　　　　　　　　S1′=(l1==ψ)?{〈l,P1,O2〉}:ψ;
　　　　　　　　　　S2′=(l2==ψ)?{〈l,P2,O2〉}:ψ;
　　　　　　　　　　Γ22={O2在P2′处的其他面};
　　　　　　　　　　Γ21={O2在P1′处的其他面};
　　　　　　　　　　Γ12={O1在P2′处的其他面};
　　　　　　　　　　Γ11={O1在P1′处的其他面};
　　　　　　　　　　S={〈l,F,O1〉｜F∈Γ21∪Γ22}∪{〈l1,F,O2〉｜F∈Γ11}∪{〈l2,F,O2〉｜F∈Γ12}∪S1′∪S2′;
　　(5) 否则∥e=〈l,P,O〉 ∥需求点与多面体的最早相交时刻
　　　　　　　PO过程：求P与O最早相交时刻tc′及与之相交的多面体面F
　　　　　　　若tc′<tc，则S={〈l,F,O1〉}∪S;tc=tc′;R=ψ;
　　(6)
转（2）.
1.4　PO算法
　　在上述FCPF算法中，第(5)步需要求一个多面体（如O1）上的顶点P与另一个多面体O（如O2）的最早相交时刻tc′及O发生相交的面.PO算法是这一过程的详细算法.
　　(1) tmax=tc ∥tc为当前已知的最早相交时刻；
　　(2) 取O2 的一个面F，P在F的正面；
　　(3) 求P在（t0,tmax）时域内与F所在平面的最早相交时刻t′，并求交点P(t′)； ∥P一定与F相交，否则，P不与O2相交；
　　(4) 取L为面F的边集；
　　(5) WHILE L不空
　　　　　　　取l∈L
　　　　　　　求l与P(t′)的关系
　　　　　　　如果P(t′)在l外
　　　　　　　　　取F因l而毗邻的面为F
　　　　　　　　　tmax=t′
　　　　　　　　　转(3)；
　　(6) END WHILE；
　　(7) P最早与O2的F相交，且相交时刻为t′.
2　算法分析
　　FCPF算法中求解l与F的最早相交时刻的过程及PO算法中求解P与F所在平面最早相交时刻的过程可由数值计算完成，且时间复杂性与多面体的复杂性无关.
2.1　算法的可终止性(收敛性)
　　在FCPF算法中会生成多个不同的tc，我们将所有这些tc按其产生的顺序为序组成一个序列{tcn}.由FCPF算法的终止条件可知，该算法的可终止性等价于该算法中{tcn}到Tc的收敛性.下面我们证明{tcn}可以在有限步内收敛到Tc.
　　命题1. 对于同一个tc，该算法只检测有限个状态.
　　证明：FCPF是一个循环过程，对于同一个tc，算法所需循环的步骤数是与该tc对应的集合S的元素个数.S的元素个数是一个有限数.当FCPF算法循环时，如果tc不发生变化，则必减少S中的一个元素.因此，对于同一个tc，FCPF算法只需循环有限步.也就是说，对于同一个tc，该算法只检测有限个状态.
　　命题2. {tcn}收敛.
　　证明：设当前tc=ti.由FCPF算法的第（4）步可知，如果tc′<tc，则用tc′替代原来的tc，即生成ti+1.因此，对于所有的i，都有ti>ti+1，即{tcn}单调下降.另外，对于所有的ti，均有ti>t0，即{tcn}有下界t0.所以，{tcn}是一个单调下降且有下界的序列，必收敛.
　　命题3. {tcn}必在有限步内收敛.
　　证明：在FCPF算法中，一个tc是O1（或O2）的一条边l与O2（或O1）的面的最早相交时刻.不同的tc对应于不同的边面对.因此tc的个数不会多于O1与O2之间的边面对数.而O1与O2均为确定的多面体，其边数与面数都是确定的、有限的，所以，O1与O2之间的边面对数也是一个有限数.由此可以知道，tc的个数是有限的，即{tcn}是一个有限序列，其收敛自然在有限步内完成.
　　由以上3个命题可知,{tcn}在有限步内收敛到Tc.
2.2　算法的时间复杂性
　　FCPF算法从第（2）～（6）步组成一个循环.整个循环过程是{tcn}到Tc的收敛过程，循环步数是{tcn}到Tc的收敛步数Nt.因为每个tc对应于一个相交的边面对，因此，{tcn}到Tc的收敛步数Nt不会超过已相交的边面对数.设检测到碰撞时，两个碰撞物体O1和O2发生相交的边数与面数分别为n1，m1和n2，m2，则已相交的边面对数不超过（n1×m2+n1×m2）.所以，Nt<（n1×m2+n1×m2）.设n=max(n1,n2)，m=max(m1, m2)，则整个算法在最坏情况下的时间复杂性为O(n×m).
　　一般来说，碰撞检测的时间步长dt=（t1-t0）较小，所以两个物体之间发生相交的边和面自然也很少，因而Nt很小.即使在dt较大时，FCPF算法仍然可以准确地计算出碰撞时间t′及所有碰撞点，而且可以有效地利用凸多面体的特性，使用PO算法加速收敛.
3　实现细节
　　FCPF算法中以下两个求解过程可由数值方法完成：（1） 求解O1中一条边AB与O2中一个面F的最早相交时刻；（2） 求解O1的顶点P与O2一个面F的最早相交时刻.假设O1与O2是符合第1.1节中基本假设的两个凸多面体.AB是O1的一条边，F是O2的一个面.
3.1　坐标系
　　绝对坐标系：设绝对坐标系的原点为O，3个单位坐标向量分别为：i,j和k.
　　参考坐标系：参考坐标系的原点取O2的重心（仍记为O2）.当ω2=0时，参考坐标系的3个单位向量不变：i′=i，j′=j，k′=k；ω2≠0时，取k′为ω2方向的单位向量，即K′=ω2/｜ω2｜，i′与j′则分别取与k′垂直的两个单位向量，且i′,j′和k′构成右手坐标系.我们用上标（R）表示向量或点在参考坐标系中的表示.如：r(R)，P(R)即为向量和点在参考坐标系中的表示.
　　当ω2=0时，参考坐标系为绝对坐标系的平移坐标系.当ω2≠0时，参考坐标系则为绝对坐标系绕平移轴的旋转坐标系.i′,j′和k′实际上是t的函数，我们记i′t,j′t和k′t为t时刻参考坐标系的3个单位坐标向量.并用i′0,j′0和k′0表示t0时刻参考坐标系的3个单位坐标向量.
　　设：［i′0,j′0, k′0］T=A0［i, j, k］T，其中：
　　　　　　　　　　　　　(1)
3.2　P,AB及F在参考坐标系中的方程
　　多面体O1的顶点P在参考坐标系中的运动方程为
　　　　　　　　(2)
A,B两个顶点在参考坐标系中的运动方程分别为
　　　　　　　　　　(3)
　　　　　　　　　　(4)
线段AB于t时刻所在的直线在参考坐标系中的方程为
　　　　　　　　　　　　　(5)
其中t∈(t0,t1］,u∈［0,1］,取n为O2的面F的法向量，Q为F的一个顶点，则F在参考坐标系中的方程为
　　　　　　　　　　　　　　　(6)
3.3　AB与F的最早相交时刻
　　AB与F的最早相交时刻即式(5)与式(6)联立式在区间（t0,t1）上使得u∈［0, 1］的最小解t′.
3.4　求P与F所在平面的最早相交时刻
　　P在（t0, tmax）内与F所在平面的最早相交时刻t′是式(2)与式(6)联立式在（t0,tmax）内的最小解t′.
4　总结
　　本文提出了一种计算凸多面体间碰撞点的快速算法.该算法可以快速求解出首次相碰的两个凸多面体间的精确碰撞时间和碰撞点，完成了基于物理特性的实时碰撞响应的一部分重要内容.本算法还有以下特点：(1) 检测到碰撞时，即使物体之间已发生很深的穿透，本算法仍能计算出物体之间的准确碰撞时间和碰撞点;(2) 当两个物体之间有多个碰撞点时，本算法可以找出所有的碰撞点；(3) 求解碰撞点时，不仅考虑了物体的平移，而且考虑了物体的旋转；(4) 因为一般的多面体都可以分解为若干凸多面体的组合，因此，本算法可以经过适当修改，应用于一般多面体的情形，具有很好的通用性.
*本文研究得到国家863高科技项目基金和国家科技部“九五”攻关项目基金资助.
作者简介：王兆其，1966年生，博士，主要研究领域为虚拟现实.
　　　　　赵沁平，1948年生，博士，教授，博士生导师，主要研究领域为计算机软件，人工智能，虚拟现实.
　　　　　汪成为，1933年生，教授，博士生导师，中国工程院院士，主要研究领域为模拟计算机，数字计算机，系统仿真，人工智能，虚拟现实.
本文通讯联系人:王兆其，北京100080,北京2704信箱
作者单位：王兆其　中国科学院计算技术研究所　北京　100080
　　　　　赵沁平　北京航空航天大学计算机科学与工程系　北京　100083
　　　　　汪成为　中国人民解放军总装备部科学技术委员会　北京　100034
E-mail: zqwang@ict.ac.cn
参考文献
　1　王兆其，赵沁平，汪成为.虚拟环境中物体物理特性的表示与处理.计算机研究与发展.1998，35（2）：97～101(Wang Zhao-qi, Zhao Qin-ping, Wang Cheng-wei. Study on representing and handling physical properties of objects in a virtual environment. Computer Research and Development, 1998，35（2）：97～101)
　2　Hahn J K. Realistic animation of rigid bodies. ACM SIGGRAPH, 1988,22(4):299～308
　3　Lin Ming C. Efficient collision detection for animation and robotics ［Ph.D. Thesis］. Department of Electrical Engineering and Computer Sciences, University of California, Berkeley, 199
本文1998-10-14收到原稿,1999-01-11收到修改稿
