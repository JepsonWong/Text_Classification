计算机应用研究
APPLICATION RESEARCH OF COMPUTERS
2000　Vol.17　No.2　P.38-41



基于Web的分布式计算
黄宏涛　王慧
摘 要 随着计算机技术和Internet/ Intranet的迅速发展，计算模式发展到Web上的分布式计算结构。Web技术由静态页面、动态页面发展到实时事务处理，原有的CGI、服务器专用API、JDBC等技术已不能满足要求。提出在Web中引入分布式对象技术，运用CORBA、Java和OODBS构建新一代的Web的分布式计算体系。
关键词 分布式对象技术 CORBA 面向对象数据库 Java
1 引言
　　基于Web的计算的诞生使得Internet在世界范围内迅速蔓延，人们通过浏览器，一种基于Web模型的客户机平台，把网络中心计算模式带到了任意一台PC上--随处可见的Web页面及图象事实上均来自于某一幕后的Web服务器。作为新一代的计算技术，Web能在不同的网络及操作系统中运行，并能方便地扩充到外部的相关企业及最终客户。它是一种完全通用的以服务为中心的体系结构。
　　本质上Web与C/S是属于同一结构体系。Web是在C/S体系基础上扩充而成的。其中包括：用户界面的重心由Windows转为Browsers ；网络通信规程被统一为TCP/IP；分布式计算结构由单一的两个层次扩展到由客户、数据库服务器、应用服务器组成的三个层次，并由于浏览器及Web服务器的加入进一步扩展为N个层次。传统的计算模式将逐渐被Web计算所取代。
　　第一阶段的Web，主要是用于静态Web页面的浏览。用户使用客户机端的浏览器，可以访问Internet上各个Web站点，在每一个站点上都有一个主页作为进入一个Web站点的入口。每一Web页中都可以含有信息及超文本链接，超文本链接可以带用户到另一Web站点或是其它的Web页。从服务器端来看，每一个Web站点由一台主机、Web服务器及许多Web页所组成，以一个主页为首，其它的Web页为支点，形成一个树状的结构。每一个Web页都是以HTML格式编写，它提供了控制超文本格式的信息，利用这些信息可以在用户的屏幕上显示出特定设计风格的Web页。Web服务器使用HTTP (HyperText Transport Protocol) 超文本传输协议将HTML文档从Web服务器传送到用户的Web浏览器上。
　　Web计算发展的第二阶段是生成动态页面。在现实社会中，大量的信息是存放在数据库中的，因此人们迫切需要将数据库与Web结合在一起，在Web上发布来自数据库的信息。这一阶段出现了CGI、服务器专用API、JDBC等技术。
　　Web计算发展的第三阶段是提供实时可伸缩的事务处理。随着Internet的迅速发展，由网络连接起来的人们越来越渴望参与到电子商务中去，面对激烈的竞争，以及出于成本方面的考虑，商业企业正在改进原有的商业系统，以支持这一新的以网络为中心的计算模式。为了在Web上进行实时可伸缩的事务处理，实现电子贸易，Web必须解决下面的关键问题，即如何实现实时的事务处理、可伸缩性、可扩展性、安全性与客户认证，以及与现有系统的集成性。
2 当前采用的技术
　　WWW上遵循的是HTTP协议。HTTP是一种以文档描述为基础的协议，以页面为传输单位。它很适于组织各种静态的文档类型元素如图片、文字及文档间的链接。
　　HTTP是无态的，而C/S系统中客户和服务器之间的协议是有态的, 状态信息是存储在数据库系统中与某个Client交互有关的数据总和，存放关于通讯历史的状态信息需要依赖有态协议的支持，即消息含义依赖于前面消息的协议。有态性的优点在于通过存储状态信息减少网络上的信息传输以提高效率。然而 WWW浏览器通常不支持状态，一个无态的服务器通常总处在一种状态，对Web客户的反应不依赖于以前请求和反应消息的历史，这种无态的协议只适合简单的查询。
　　HTTP协议的另一个缺点是每次HTTP会话(一个请求和回应的过程)都打开一个新的TCP连接，这是对系统和网络资源的浪费。因为可以在一次TCP连接中实现多个会话过程，不同的会话过程用标志位来区分。为了克服这些缺点，目前与数据库系统结合构建Web计算普遍采用的技术有CGI、服务器专用API、JDBC等。
2.1 CGI
　　如图1所示为CGI工作流程，CGI的主要优点是处理比较简单，但它有以下一些不足：

图1　CGI工作流程
　　(1) CGI模式中Web客户与服务器的交互必须通过HTTP服务器，当客户数目增加时，它很容易成为一个瓶颈。对于Web客户的每一个请求或者数据库服务器的每一次反应，HTTP都必须进行HTML模式的转换，这样大大增加了查询处理的开销。
　　(2)CGI方法很难模拟通常的C/S系统之间的交互，因为它不能在客户与服务器交互过程中一直保持通讯通道。在请求处理完之后，通讯通道也被关闭。因此很难支持有多个操作的事务处理，而事务支持对于系统的实用性是很重要的。
　　(3)由于HTTP的无态性，由Web客户产生的查询需要与用户ID和口令一起发出，从Web客户到HTTP服务器的数据传输通常是以普通的ASCII模式，然而将用户和口令嵌入到CGI程序中去访问后台数据库，由HTTP服务器完成对用户的访问控制，这种控制仅仅是一种对用户的控制方式，并不能支持类似数据库的控制功能。
　　(4)利用CGI方式处理客户请求，向用户展示的是基于表格的界面。C/S系统的一个特点是查询结果的图形表示，这就要求Web客户能够执行图形功能。HTML的限制使得图形的显示比较困难，尽管VRML可以显示三维图形，但是仍然依赖于HTTP，产生的GIF格式或者其它格式的图象文件，由于所有的图象都要由CGI程序在HTTP服务器一侧产生，速度慢、占用空间多。
　　(5)对于通过CGI向后台数据库服务器提交的每次查询，数据库服务器都必须执行同样的登录和退出程序，而不管是否下一次查询是同一个客户发出的。这样会耗费大量的时间和开销，对于大型的C/S系统实现Web客户，需要建立和维护大量CGI文本。在通常的C/S系统中，许多功能是由客户程序完成的。而在CGI方式中，所有的工作都是要用CGI程序以后台方式处理，反应时间长，客户对每个请求的处理需要等待较长时间。
2.2 服务器专用API
　　某些Web服务器向服务器扩展程序提供API以替代CGI。这种系统结构中，服务器扩展程序作为动态链接库(DLL)形式提供，本质上是一组编译的对象代码库例程，它们为Web服务器所调用，看起来像是服务器核心程序的一部分。这种扩展Web服务器功能的方式是CGI程序所没有的。CGI程序仅在Web服务器的请求?应答循环中才被调用，但调用DLL或共享对象的API却能在整个循环中被调用，所以使用API程序比CGI程序具有更高的运行效率，客户端响应性也更好。
　　API随Web服务器不同而不同，最流行的技术是Microsoft的ISAPI、IDC和ASP，以及Netscape的NSAPI。
　　使用API存在着危险，如果Web服务器的API调用或者服务器扩展程序的API函数不够健壮的话，会导致Web服务器的瘫痪。DLL或共享对象实际上成了Web服务器内核机能的一部分。如果CGI程序失效了，Web服务器将继续工作，最终失效的CGI程序将会从内存中卸载。
2.3 JDBC
　　JDBC(Java DataBase Connectivity)是Java语言与数据库管理系统之间的接口，通过它，一个Java应用程序可以访问任何一个关系型数据库。JDBC是Java语言中执行SQL语句的API，它是一系列类(Classes)和接口(Interface)所组成，这些类和接口均是由Java语言编写，程序开发者使用这类和接口与数据库建立连接，发送SQL语句，处理SQL语句返回的结果。
　　如图2所示，为JDBC的工作流程。

图2　JDBC工作流程
　　浏览器向HTTP服务器发出请求，然后对HTTP服务器返回的HTML文本进行分析处理，决定需要下载的Java字节码文件。并且，浏览器所带的JVM (Java Virtual Machine)对其进一步分析，将Applet相关类的字节码文件和JDBC接口类的字节码文件下载到客户端，然后JVM对所下载的字节码文件进行检验，检验通过后就执行Applet。此时，客户机与HTTP服务器断开。Applet根据HTML文本所提供的数据库地址、端口和帐号直接与数据库建立连接，进行数据交互。
　　与基于CGI相比,基于Java的方法提供了高度的灵活性、可扩充性、可移植性和健壮性。它适宜在合作的开发环境中建立一个强壮的Web结构和在异质数据库之间实现数据库系统之间的可扩充性和交互性。但它与数据库的连接一般都需要通过ODBC,性能不高。
3 新一代Web计算
3.1 CORBA与Java的互补
　　以网络为中心的计算不同于过去的单机环境下的情况，在这样的大环境中，网络本身已成为一种资源，计算的任务往往是开放、复杂、多层次的。这种背景下分布式对象技术DOT(Distributed Object Technology)应运而生。基于对象的分布式计算所面临的挑战是建立一系统让软件对象间透明地进行通信，彼此使用对方的服务而不管这些对象是处于同一编址空间，还是不同的空间或是根本不同的机器上。当前国际上分布对象技术最具有代表性的是对象管理集团OMG (Object Management Group)提出的公共对象请求代理体系结构CORBA(Common Object Request Broker Architecture)和Microsoft的分布式组件对象模型DCOM (Distributed Component Object Model)。DCOM局限在Windows平台，而CORBA在几乎所有现行服务器、客户机平台下可用。
　　使用CORBA、Java和OODBS能构建新一代Web分布式计算结构。
　　Java和CORBA 在体系结构上是互补的，CORBA 处理网络的透明性，而Java解决实现的透明性。CORBA 是Java可移植应用环境与网络对象世界的桥梁。
　　CORBA 为Java 带来了：
　　第一，它可以消除CGI的瓶颈，使客户端能直接调用服务器上的方法。客户端可以利用预编译过的存根(Stub)传递参数或利用CORBA 的动态调度服务在运行中产生参数，服务器通过一个预编译过的程序直接接收调用。与HTTP/CGI比较起来，客户/服务器的开销非常小。在CGI中，一个Applet每次调用服务器上的方法必须要启动一个新的程序请求，而CORBA 不需要；CGI不能维护客户端调用间的状态，CORBA 则可以做到。
　　第二，CORBA 可以提供可伸缩的服务器到服务器的基础结构，对象也可以利用CORBA ORB进行通信。这样，为了均衡来自客户机的请求负荷，ORB可以让这些对象运行在多个服务器上，而且，ORB还可以根据各服务器的负荷情况进行调度。而CGI面对要响应的成百上千个请求，无法将负载分散到多个进程或多个处理器上，这是CGI应用的瓶颈。
　　第三，CORBA可以采用分布对象结构扩充Java。目前，Java Applet还不能利用远程方法调用进行跨地址空间的通信，而CORBA可以使Java Applet能够和用不同语言编写的其它对象进行跨越地址空间及网络的通信，同时还可以提供强大的分布对象服务。
　　而Java为CORBA带来了：
　　第一，Java使CORBA 在Web上无所不在，Java的动态特性使你能在运行时动态地安排CORBA结构。Netscape的Visigenic's VisiBroker for Java作为与CORBA兼容的Java ORB被捆绑在Netscape所有的浏览器和服务器上。
　　第二，Java简化了大型CORBA系统的代码分发。 Java代码能由服务器布置和管理。你可以在服务器上更新代码而客户在它需要时接受更新的代码。这样你可以更容易管理大型CORBA系统，而不需要你手工更新每个客户桌面上的程序。
　　第三，Java语言适合于开发CORBA对象。 Java是开发客户和服务器对象的理想语言。 Java的多线程、无用空间的收集和出错管理使其很容易编写出健壮的网络对象代码。
　　CORBA与Java的结合产生了CORBA/Java ORB，CORBA/Java ORB完全采用Java编写，可真正流动执行。ORB必须能够从CORBA IDL生成Java语言联编代码，此外，由IDL编译器生成的代码必须是纯 Java的，用户下载此代码后，能够在任何配有Java运行环境的机器上运行。Sun公司的Joe、Iona公司的Iona Orbix Web以及Netscape的VisiBroker for Java都属于CORBA/Java ORB。
3.2 OODBS
　　传统的关系数据库在很多情况下不能提供高性能的分布式计算如满足电子商务的需要，而采用面向对象数据库系统(OODBS)则能符合要求。
　　①多媒体数据类型处理的要求。Internet上的信息发布要求把文档存储在一个DBMS中，显然有相当部分的数据不是传统类型的数据，除了文本和数字外，还有许多复杂的数据类型(如声音、图象和动画)。文件和关系数据库以二进制大对象BLOB (Binary Large Object)来处理多媒体数据。但是有关BLOB的描述信息却很少存储，因而很难对BLOB进行检索。另一方面面向对象数据库将BLOB集成于复杂数据之中同时提供包括搜索等复杂的操作。加载的HTML页面实际上是一个复合对象，而面向对象的数据库擅长于处理这样的问题。面向对象的数据库管理系统(OODBMS)引擎返回被请求的对象并将其存于Cache里以备后来使用。
　　②电子商务和复杂交互的要求。在Web上开展商业活动已越来越普遍，但要真正做到像现实购物那样进行复杂的交互还有困难。设想在Web上购买小轿车，从服务器上下载Java Applet，你通过它表达你想购买什么类型的小轿车，然后开始进行交互“车的颜色、车开动时的录像、价格信息、款式、销售人员介绍车的特性、经销商的地址等”。甚至你可以与销售人员讨价还价。这可能需要10个或更多的Java Applet以及成兆字节的数据。在传统的关系数据库中，这种交互要涉及大量的数据库、非常复杂的数据类型和网络的持久连接，同时包含许多交互的SQL查询。随着查询涉及数据库的增加，性能将会降低。但如果使用面向对象数据库，会话对象和所有它的组成对象可以定义于同一位置，数据库引擎只需简单地连接相关对象，甚至是Java Applet和相关对象也能由OODBMS组织和管理。同时OODBMS能提前按导航路径直接存取数据。OODBMS使用指针、Hash表等其它查询方法定位数据以获得快捷直接存取。OODBMS使用RAM或Cache来存取访问数据。因而OODBMS性能较RDBMS要优越。另一方面RDBMS很难管理会话中对象间动态关系的复杂性而OODBMS是基于动态模式的，它能提供合适的工具引导会话。
3.3 计算模型
　　其工作流程如下：
　　①从Web浏览器下载HTML页面，其中HTML页包含有对所有嵌入的 Java Applet的引用、参照。

图3　新一代Web计算模型
　　②Web浏览器从HTTP服务器检索Java应用程序。HTTP服务器在找到所需的程序后，以字节码的形式下载给浏览器。
　　③Web浏览器加载Java Applet，Applet通过Java运行安全检查，然后进入客户机主存运行。
　　④Applet启动CORBA服务器对象。Java Applet中所包含以IDL形式生成的客户端存根(Stub)程序模块，利用这些存根程序模块可以调用CORBA服务器中的对象。Java Applet和CORBA服务器对象间的会话一直持续到有一端断开连接为止。
　　⑤如果需要的话，服务器对象可以为客户端生成新的HTML页。该页准备好后，服务器就能指示客户端要下载的URL。一般不需要在服务器端动态生成HTML页，客户端应用会为具有嵌入Applet组件的单独HTML页打包，在CORBA的环境中，只要将嵌入HTML层的组件点击一下，客户立刻就能与服务器进行交互。
4 小结
　　运用CORBA、Java和OODBMS的技术能构建面向对象的Web分布式计算结构，CORBA作为一个完美的分布式对象平台使不同语言编写的对象能跨越地址空间及网络通信，Java能使对象在Internet上无所不在，而OODBMS可以具有表示和构造复杂数据类型(如多媒体数据)的能力，提供了对象数据的存储，它可以满足需大量交互和复杂的事务处理如电子商务的需要。
黄宏涛（广东省财税高等专科学校 广州 510420）
王慧（武汉大学计算机科学系 武汉 430072）
参考文献
1，Eric Evans,Daniel Rogers. Using Java Applets and CORBA for Multi-User Distributed Applications. IEEE Internet Computing, May-June, 1997
2，赵洪彪. 数据库系统与WWW的集成途径. 计算机科学, 1997 6: 66～69
收稿日期：1999年7月7日
