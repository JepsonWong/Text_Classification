计算机应用
Computer Applications
1999年 第19卷 第7期  Vol.19 No.7 1999



地理示意图排版软件的面向对象分析
伍　江　魏子乐
　　摘　要　本文讨论了一个地理示意图排版软件的主要结构和思想。该软件采用面向对象的方法进行分析、设计和实现。本文具体阐述了所采用的面向对象方法，并在一些较难实现的功能上提出了创新的解决方法。
　　关键词　面向对象, OOA, 属性, 服务, 连接, 地理示意图

　　
THE OBJECT-ORIENTED ANALYSIS
OF MAP-PUBLISHING SOFTWARE

Wu Jiang　Wei Zile
National Key Laboratory of Text & Graphics Processing, Institute of Computer Science & Technology, 
Peking University, Beijing 100871

　　Abstract　This paper discusses the main structure and theory of a map-publishing software. This software is analyzed, designed and implemented with object-oriented method. This paper describes detailedly the method used in the software, and gives creative solutions to some difficult problems.
　　Keywords　Object-oriented, OOA, Attribute, Service, Link, Map

1　引言
　　地理示意图的排版在专业排版领域还属于一个比较新的方向。当排版人员需要在报纸或杂志的版面上插入一个示意图以表示某个地方的相对位置以及该地方的街区概貌时，通常使用Illustrator、CorelDraw、FreeHand等通用绘图软件来完成。但这些绘图软件由于其固有的通用性，满足不了地理示意图的一些特定要求，例如：方便地绘制各种类型的道路、铁路、河流；灵活设定不同道路之间的交叉覆盖和焊接；灵活地设定文字的方向和位置，等等，这些都是通用绘图软件所不具备的功能。
　　我们开发的地理示意图软件是专门针对各类对坐标位置要求不是很精确的地理示意图的排版而设计的，在需求上考虑了地理示意图版式和操作两方面的特点，因此既不同于精确度很高的专业地图绘制系统，也不同于通用的绘图软件。在整个开发过程中，我们采用了面向对象的分析方法。　　
2　地理示意图软件的需求描述
　　地理示意图排版软件最基本的功能需求是：在窗口上用鼠标以所见即所得的方式生成一个报刊杂志排版时常用的示意图，并且可以将此示意图输出为eps文件或直接打印输出到打印机上。以下是一个示意图的例子：　　


图1
　　和一般的图形软件相比，示意图软件必须具有如下特殊功能：
　　能方便地绘制各种风格的道路、铁路、河流等通用图形对象；
　　能方便地在道路河流交叉的地方画桥；
　　能方便地设定不同道路铁路之间在交叉点处的相互覆盖关系，甚至能够实现两条道路首尾互相覆盖；
　　能方便地将多条道路焊接在一起，构成连通的道路；
　　提供用于绘制示意图的基本图例，且图例的参数可由用户调节；
　　能方便地将一串文字安排到路中间或旁边，以及与路平行的方向，还能设定文字的指示线，使其固定指向某个位置。
3　面向对象的需求分析
3.1　指导思想和原理
　　从上面的需求可以看出：地理示意图软件是一种具有强烈对象化特征的软件，因而较适合采用面向对象的方法进行分析、设计和实现，即运用对象、类、继承、封装、聚合、消息传送、多态性等概念来构造该系统。［2］
3.2　发现对象，建立对象类
　　如图1所示，示意图主要由一些道路、建筑物和各种标志及文字组成。因此系统中的对象可以是：
　　示意图对象　表示整个要被排版的地理示意图。对地理示意图进行的各种操作都首先通过该对象进行。后文的所有对象和示意图对象的关系均是整体―部分关系，它们被示意图对象所包含。
　　道路对象　表示地理示意图中的各种道路。它又可派生出以下几种道路对象：带边界路、黑白相间路、无边界路、河流。带边界路的特点是：在一条具有给定宽度和颜色的线两侧再附加上给定宽度和颜色的边界；黑白相间路是指：沿着线的走向黑线段和白线段相互间隔的路；无边界路只是一条具有给定宽度和颜色的线；河流则是在带边界路的基础上再将两条边之间的部分铺以适当的波纹。带边界路、黑白相间路、无边界路、河流分别构成四类独立的对象，它们和道路对象之间是一般――特殊关系。
　　标志物对象　地理示意图中的各种特殊标志。标志物对象也需要派生出大量具体的对象：如电话亭，路标，公共汽车站，加油站等。每种对象均可由用户设定其特定的参数。
　　文字对象　示意图上的文字描述，可以包含边框、可以有附加的指示线指向相应的对象。
　　扩充图形对象　这是一类没有固定物理意义的对象，它具有较强的形状描述能力，能够描述各种比较复杂的几何形状，包括圆、矩形、曲线或直线多边形、以及由这些形状合并而成的复杂形状。扩充图形对象类似于通用绘图软件中的图元对象，用于描述地理示意图中除去以上对象之外的其它各类有形对象。
　　依赖对象　用于实现道路之间的覆盖、焊接、道路和河流之间的桥。这类对象依赖于相应的道路或河流而存在，但又有一定的独立性，因而自成一类，称为依赖对象。从依赖对象派生出覆盖对象、焊接对象、桥对象，从而具体实现道路和道路之间交叉点处的覆盖、焊接和桥。依赖对象和前述的道路对象之间具有实例连接和消息连接两种联系。下图是这三类依赖对象的具体实例：　　


图2

3.3　定义属性和服务
　　限于篇幅，表1只列出各对象的一些主要属性和服务。　

表1

对象名称属性服务
示意图对象示意图上所有对象(从2到6的对象)的列表。
示意图的边框和底色。
示意图大小。对象检索服务：列举出示意图中的所有对象或某一类对象；
添加一个新的对象到示意图中；
删除示意图中的对象；
调整对象在示意图中的顺序；
输出整个示意图到屏幕或eps文件。
道路对象
（四种具体道路对象的属性和服务从略）道路的骨架线。取道路的骨架线；
取道路的轮廓；
输出道路到屏幕或eps文件。
标志物对象（每一个具体的标志物对象的属性和服务从略）标志物的位置。输出志物到屏幕或eps文件。
文字对象文字串。
文字所在的位置。
文字的排版格式（如文字的字体，字号，颜色等）附加的提示线属性。输出文字到屏幕或eps文件。
扩充图形对象扩充图形的位置。
扩充图形的形状参数。输出扩充图形到屏幕或eps文件。
依赖对象此对象所依赖的其他对象的标识。
此对象的轮廓和位置。设置此对象所依赖的对象；
获取此对象所依赖的对象；
输出依赖对象到屏幕或eps文件。
覆盖对象（继承依赖
对象的全部属性）两个有覆盖关系的对象的上下顺序。交换所依赖对象的上下覆盖关系；
输出覆盖对象到屏幕或eps文件。
焊接对象（继承依赖对象的全部属性）（没有特别的属性）输出焊接对象到屏幕或eps文件。
桥对象（继承依赖对象的全部属性）两个具有桥关系的对象的上下顺序。
桥的具体参数。交换所依赖对象的上下关系；
修改桥的参数；
输出桥对象到屏幕或eps文件。

4　定义结构和连接
4.1　整体――部分结构
　　示意图对象包含了所有其他对象，它和其他对象的关系是整体――部分结构。用面向对象的分析图表示出来就是：　　


4.2　一般――特殊结构
　　道路对象和带边界路、黑白相间路、无边界路、河流的关系是一般――特殊结构。后四种路继承道路对象的属性和服务，并重载其中的“取道路的轮廓”和“输出道路到屏幕或eps文件”两项服务。　


　　另外，依赖对象和覆盖对象、焊接对象、桥对象的关系也是一般――特殊结构。后三者重载依赖对象的“输出依赖对象到屏幕或eps文件”服务。图略。
4.3　实例连接
　　A) 覆盖对象
　　在各个依赖对象和道路对象之间存在着实例连接的关系。这是因为：每一个依赖对象都是为某些道路对象提供服务的。例如：两条道路发生了一个交叉，则在交叉点处形成一个覆盖对象。该覆盖对象依赖且只依赖于这两条道路。而这两条道路则通过这个覆盖对象来实现它们在交叉点处时谁在上面谁在下面。
　　具体的实现机理是：首先根据两条道路的骨架线计算出它们的交叉点，然后再根据它们各自的宽度算出它们在该交叉点处的重叠区。该重叠区即是覆盖对象的轮廓。若想实现道路A在该交叉点处盖住道路B，只需在画完道路A和道路B时再画覆盖对象，而覆盖对象的画函数则是去调用道路A的画函数再重画一次，画的时候设置覆盖对象的轮廓（即道路A和道路B在该处的重叠区）作为裁剪区。这样，就实现了道路A在该交叉点处盖住了道路B。反之，若想实现道路B在该交叉点处盖住道路A，只须让覆盖对象调用道路B的画函数进行重画。由于设置了裁剪区，因此当覆盖对象重画A时不会使一些本来应该盖住A的对象反过来又被A盖住了。
　　这样实现覆盖效果的好处是：无论在交叉点处要实现谁覆盖谁，都不需要移动两条道路的上下关系。从而能保证这两条道路和其他对象之间的上下关系不变。更进一步，若两条道路有两个交叉点，通过分别建立两个覆盖对象，还能实现它们在不同的交叉点处具有相反的上下关系。例如：A的头盖住B的尾，B的头又盖住A的尾。这在高要求的地理示意图中是很可能出现的，而一般的绘图软件要做到这点会很困难。这种方法的另一个好处是便于用户操作：由于覆盖对象具有明确的轮廓（重叠区），因此可以允许用户简单地用鼠标单击重叠区而实现切换该交叉点处的上下覆盖关系。
　　这种方法的一个主要要求是覆盖对象必须在道路A和道路B画完之后再画。这也是它们之间的静态联系之一。
　　B) 桥对象
　　桥对象和覆盖对象非常类似。它们的主要不同在于画覆盖对象时，只是简单地调用道路的画函数进行重画；而桥对象的画函数稍微有点复杂：首先将桥本身的形状、底纹等画好，再调道路A的画函数，从而实现道路A首先架在桥上，桥再盖住道路B的效果。另外，桥对象的轮廓计算和覆盖对象的轮廓计算方法不一样，需要考虑桥本身的属性。
　　C) 焊接对象
　　焊接对象是用于实现将几条带边界路的边界内部分（我们称为路心）焊接在一起。（对于另外三类道路，无需考虑焊接）。由于有可能多条道路在它们的公共交叉点处发生焊接，因此焊接对象要能同时依赖两条以上的道路。焊接对象的实现机理是：当几条带边界路在某个位置交叉在一起时，由用户通过鼠标将它们在交叉点处的重叠区标识出来（用不规则多边形描述）。该区域作为要生成的焊接对象的轮廓。当将这几条道路都画完后，再通知焊接对象画出自身。焊接对象的画函数则轮流调用每一个被它依赖的带边界路的画路心的函数，并设置焊接对象的轮廓为裁剪区。由于每条带边界路将自己的路心在焊接对象指定的轮廓内重画，因而确保它们的路心都可见，也就是说，在该区域内所有横越路心的边界都会被覆盖掉，从而实现将几条道路的路心焊接在一起的效果。
　　这种焊接的好处就是不必将被焊接的多个对象变成一个对象。因而仍然能对它们单独进行操作，例如：其中的某条道路可能又会和别的道路发生复杂的焊接或覆盖关系。这对于现代城市的地理示意图来说，可能是一个非常重要的功能。
　　这种方法的主要要求是带边界路除了提供能将整个道路画出来的服务以外，还应该提供只画路心的服务。另外，和覆盖对象一样，焊接对象也要在它所依赖的各道路对象画完之后才能画。
　　D) 示意图
　　以上三种联系用图表示出来如下：　　


4.4　消息连接
　　在依赖对象和道路对象之间还存在着双向的消息连接。这主要体现在两方面。一方面当道路对象移动或删除时，由于原来的交叉区域不再存在或已改变位置，导致依赖于这几条路的依赖对象也需要改变位置，甚至有可能不再存在，因而需要删除相应的依赖对象或移动依赖对象的位置；另一方面当依赖对象在画自身时，又需要调用道路对象的画函数来完成任务。
5　结束语
　　在我们开发的地理示意图排版软件中运用OOA方法使我们的程序更易理解，也更易扩展和修改。由于程序的结构与问题的结构更为接近，因而当问题发生变化时，程序也更容易跟随进行修改，从而延长程序的生存周期，降低了开发成本。
　　伍　江　博士研究生。主要研究方向：文字和图形的计算机处理。
　　魏子乐　硕士研究生。主要研究方向：文字和图形的计算机处理。
　　作者单位：伍　江　魏子乐（北京大学计算机研究所文字图形处理国家重点实验室　北京100871）
参考文献
［1］汪成为，郑小军，彭木昌. 面向对象的分析、设计及应用. 北京：国防工业出版社，1992
［2］邵维忠，杨芙清. 面向对象的系统分析. 北京：清华大学出版社，广西：广西科学技术出版社，1998 
收稿日期:1999-03-22
