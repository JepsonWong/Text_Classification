计算机应用研究
APPLICATION RESEARCH OF COMPUTERS
2000 Vol.17 No.3 P.62-65




性能优化的同态滤波空域算法
闻莎　游志胜
摘　要：集中了同态滤波的常用算法，从传统的频域算法到现在常用的空域算法。在空域算法中，采用了邻域平均和高斯函数两种算法来近似地实现低通滤波，它们克服了频域算法的部分缺点，但计算效率不高，所以又利用滑窗思想和模板分解思想分别对邻域平均和高斯函数滤波两种算法分别进行了改进，大大提高了空域同态滤波的计算效率。
关键词：同态滤波 频域滤波 空域滤波 滑窗思想 模板分解
1　概要
　　同态滤波是在图象处理中较常用到的一种算法,它通常用于处理照明不均的图象或是校正MR图象中强度不均的问题。
　　对于一幅图象来说,其灰度值可以看成是由入射光分量和反射光分量两部分的乘积,其中入射光取决于光源，它比较均匀，随空间位置变化较小，所以入射光占据频率域的低频部分，对应图象背景。而反射光取决于物体本身的性质，也就是说景物的亮度特征主要取决于反射光。由于物体性质和结构特点不同(迎光,背光,轮廓......)， 反射光的强弱也很不相同，随空间位置变化较剧烈，所以, 反射光占据频率域的高频部分, 对应图象细节。我们对照明不均的图象的处理，就是要尽量削减入射光分量的影响，即压制图象的低频分量，同时,要增强物体的反射光分量，即是放大图象的高频分量。经过这样的处理，对于一幅照明不均的图象,我们能够在压制其动态范围的同时增强图象的对比度，达到我们的处理目的。
　　经典的同态滤波算法是在频率域上进行的，先利用FFT将图象变换到频率域上，然后再用适当的滤波函数对低频部分和高频部分施加不同的影响，最后再作IFFT变换回来。但是频率域算法有几个缺点：一是要对整幅图象处理完后才能见到结果；二是计算FFT时要扩展到复数域，占用运算空间较大；三是进行两次FFT花费的时间也不少。所以我们现在将同态滤波通常放到空间域上来做，一般的做法是先对图象作低通滤波，再用原图减去低通后的图象，得到同态滤波的最终结果。在空间域上作同态滤波能够克服频率域算法的前两个缺点，至于速度，关键在低通滤波这一环,本文用了邻域平均和高斯函数两种算法来近似地实现低通滤波，并且利用滑窗思想和模板分解的思想分别对低通滤波的两种算法进行了改进，大大减少了计算量，提高了速度，使得空域上的同态滤波取得了比较好的效果。
2　算法
2.1　传统的频域算法
　　图象的灰度函数f(x,y)看成是入射光分量和反射光分量两部分的乘积，即：
f (x,y) = i (x,y) r (x,y)
其中i(x,y)是入射光，且0<i(x, y)<∞而r(x,y)是反射光，且有0<r(x,y)<1,在作FFT变换之前要先用取对数的办法将两个分量分开，以便分别对两个分量做不同的处理，即令:
z (x,y) = ln f(x,y) = ln i(x,y) + ln r(x,y)
　　然后再作FFT变换,于是
F{z(x,y)} = F{ln i(x,y)} + F{ln r(x,y)}
　　简记为:
Z(u,v) = I(u,v) +R(u,v)
　　接下来选择一个合适的滤波函数H(u,v)，对信号z(x,y)进行处理，则滤波器的输出为：
S(u,v) = H(u,v)Z(u,v) = H(u,v) I(u,v) +H(u,v)R(u,v)
　　再取其IFFT变换,得到空间域的输出为：
s(x,y)=F-1[S(u,v)]=F-1[H(u,v)I(u,v)]+F-1[H(u,v)R(u,v)]=i'(x,y)+r'(x,y)
　　因为最初是用取对数将入射光和反射光分量分开,所以最后还要对s(x,y)进行反对数运算,才能得到正确的结果:
g(x,y)=exp[s(x,y)]=exp[i'(x,y)]exp[r'(x,y)]=i0(x,y)+r0(x,y)
　　上述处理过程可以用下图来表示。

　　在频率域算法中，影响速度的步骤是FFT和IFFT，因此运算时间只与图象的大小有关，与其它因素无关。而影响同态滤波效果的则是滤波函数H(u,v)，它的选择直接影响到图象处理出来的效果，现在较常用到的滤波函数有ButterWorth高通滤波器和指数高通滤波器, 它们的作用都是压制低频而增强高频，可以达到同态滤波希望达到的效果，ButterWorth高通滤波器的形式是：

其中k根据截止频率D0的定义不同可选为7或0.414，另外n与ButterWorth高通滤波器变化的剧烈程度成正比。在本文中k选为0.414，D0选为2，而n也选为2。指数高通滤波器的形式是：
e-k[D0/D(u,v)]n
其中k根据截止频率D0的定义不同可选为1或0.347，另外n与指数高通滤波器变化的剧烈程度成正比。在本文中k选为0.347，D0选为2，而n选为1。
2.2　空域算法
　　正是因为频率域算法存在几个缺点，所以我们常常将同态滤波放到空间域上面来做。空域算法可以克服频域算法占用空间大的缺点，并且也不必等到整幅图象处理完便可以得到局部结果。同态滤波的空域算法的大致思想是先对图象做低通滤波，再用原图象减去低通滤波后的图象，得到的结果即可以基本反映出压制低频而增强高频的效果。下面我们将详细介绍一下空域算法的具体步骤。
　　首先我们把图象的灰度函数f(x,y)用下式来表示：
f(x,y)=i0．i(x,y)．r(x,y)
其中i(x,y)是入射光分量，r(x,y) 是反射光分量，另外请注意，我们在这里还乘了一个分量i0，它是一个为常量的入射光分量，之所以要乘上这个入射光常量i0，是因为我们想要在最后处理得到的图象中保留一定的低频分量，以便能得到比较好的显示效果。如果不乘上这个入射光常量i0，那我们在用原图象减去低通滤波的图象后，将失去绝大部分低频信息，这样得到的结果类似于仅对原图作高通滤波，而并非我们期望的压制低频而增强高频，所以这里的i0分量是必需的。
　　接下来仍然利用取对数的办法将入射光和反射光分量分离：
g(x,y)=lnf(x,y)=lni0+lni(x,y)+lnr(x,y)
　　因为入射光分量对应图象的低频部分，而反射光分量对应图象的高频部分，于是当我们对g(x,y)进行低通滤波后，就能近似地将入射光分量(即图象的低频部分)分离出来，见下式：
g'(x,y)=LPF{g(x,y)}≈lni0+lni(x,y)
　　得到低通滤波的图象后，我们便很容易得到高频增强的图象s(x,y)：
s(x,y)=g(x,y)-g'(x,y)+lni0≈lni0+lnr(x,y)
　　最后，因为开始利用取对数将入射光和反射光分量分离，所以还要对结果s(x,y)取反对数，才能得到最终的正确结果：
s'(x,y)=exp[s(x,y)]≈i0．r(x,y)
　　同态滤波的空域算法中，影响处理效果的步骤是低通滤波器的选择以及入射光常量i0的指定，影响速度的关键在低通滤波一步。空域同态滤波算法要解决的主要问题就是滤波的速度问题，下面我们详细介绍一下低通滤波的过程。
　　在本文中采用了两种方法来实现低通滤波：一种是利用邻域平均法来近似地实现低通滤波；另一种是利用高斯函数来实现低通滤波。我们下面将分别对它们作介绍。
2.2.1 用邻域平均法近似地实现低通滤波
　　用邻域平均法来近似地实现低通滤波是比较简单的办法，见下式：

　　邻域平均虽然简单，但是要得到比较好的效果的话，邻域一定要取得比较大，否则在减去低通图象后会损失很多低频信息，即使是乘上了入射光常量i0也无法弥补。但是同时我们知道，邻域平均滤波的时间复杂度与所定邻域的大小是成正比的，所以，一旦邻域增大，滤波所花费的时间也会随之增大。我们所要做的就是在大邻域的情况下，怎样减少计算量，提高滤波的速度。
　　借鉴T.S.Huang在中值滤波中采用的滑窗思想。每计算一个象素点周围邻域的均值时，不必都作一次累加和，否则当邻域很大时，计算每个象素点均值滤波后的值都将花费很长时间。我们利用滑动窗口的思想会减少很多计算量，只需计算左上角第一个窗口的灰度值累加和。至于其它象素邻域窗口的累加和，只要移动第一个窗口并修改其累加和即可以得到，我们先用一维的例子大体说明一下滑窗的思想，见下式：

　　至于二维的图象，首先假设图象大小为N(M，滤波窗口大小为K(K(假设K为奇数)，定义列和Col(x,y)是在点(x,y)处，以y为中心的一列K个象素的和，窗口和Win(x,y)是以点(x,y)为中心的K(K窗口内的象素之和，有如下关系：


　　当窗口向右滑动一个象素时，按下面(1)式更新窗口和Win(x,y)：
　　　　　(1)
　　当窗口向下滑动一个象素时，按下面(2)式更新列和Col (x,y)：
　　　　　(2)
　　具体的步骤如下：
　　1)y = 0; 计算x= 0，1，...，N-1时的列和Col(x,0)；
　　2)计算左上角第一个窗口的窗口和Win(0,0)，得到点(0, 0)的滤波输出；
　　3)按照(1)式计算当x=1,..., N-1时的窗口和Win(x,0),并得到第一行象素的滤波输出;
　　4)y=y+1；判断y值是否等于M，若等于则跳到7)，否则执行5);
　　5)按照(2)式计算当x=0,1,...,N-1时的列和Col(x,y);
　　6)计算Win(0,y)的值，并且按照(1)式计算当x=1，...，N-1时的窗口和Win(x,y),并得到第y行象素的滤波输出，然后转到4)执行;
　　7)整幅图象滤波结束。
　　利用上面的滑窗算法来实现二维均值滤波时，可以大大地提高计算速度，并使算法的时间复杂度与窗口(或邻域)的大小无关。在传统的二维均值滤波算法中，计算每个象素点的滤波输出的运算量为1次乘法和K(K次加法；而在改进的滑窗算法中，在不计边界处理的条件下，每个象素点的滤波输出的运算量为1次乘法和4次加法。
2.2.2　用高斯函数实现低通滤波
　　利用高斯函数来实现低通滤波也可以得到比较好的效果，高斯函数的形式如下：

其中A和σ是常数，由自己指定的，它们的值将影响到滤波的效果。在本文中，将A的值暂定为0.1，而σ的值暂定为1。另外影响滤波效果的还有可变的高斯滤波窗的大小。为便于计算，假设高斯滤波窗的大小为n(n(假设n为奇数)，则用高斯函数G(x,y)对图象f (x,y)进行低通滤波相当于拿n(n的高斯模板G(x,y)与图象f(x,y)作卷积，滤波输出为g(x,y)，见下式：

　　这样计算一个象素点的滤波输出将需要有n(n次乘法和n(n次加法，当滤波窗增大时，时间复杂度将迅速增大，于是我们需要对其进行改进，以提高高斯低通滤波的效率。我们注意到，高斯滤波窗是一种特殊的滤波窗，它具有很强的空间对称性，即中心旋转对称，这使得滤波的结果与图象的方向无关，并且因此二维的高斯函数可分解为x和y方向的两个一维函数的乘积，见下式：

　　这样用n(n的高斯模板G(x,y)与图象f (x,y)作卷积的式子可以写成：

　　这样一来高斯模板与图象的二维卷积便分解为行和列方向的两次一维卷积计算，这时每计算一个象素点的滤波输出只需要有2n次乘法和2n次加法，计算量明显减少，计算效率也随之提高。对于用方向对称模板作线性滤波的情况，这种模板分解方法都能有效地提高其计算效率。
3　实验及结果
　　本文的实验环境是Pentium 200的微机，编程语言是VC 5.0，实验对象是256(256的黑白图象。本文共用了六种算法来实现同态滤波，其中在频域算法中，分别采用了ButterWorth和指数两种滤波器来作同态滤波器。在空域算法中，先分别采用传统的邻域平均和高斯滤波窗作低通滤波来实现空域的同态滤波。接下来又利用滑窗思想和模板分解思想分别对空域的两种算法做了改进。两种改进算法均比原来的传统算法的效率要高一些。
　　下面的表格1列出的是频域同态滤波的两种算法的执行时间情况。请注意，用频域算法实现时，花费的时间与滤波模板的大小无关。表格2列出的是对在不同大小滤波模板的情况下，用空域同态滤波的四种算法来实现时所花费的时间情况。
表 1 频域同态滤波的两种算法

频域算法执行时间(秒)
ButterWorth滤波器4.14
指数滤波器4.25

表 2 空域同态滤波的四种算法

滤波模板大小3591321273341
执行时间秒传统的邻域平均0.3890.6451.4833.5986.73010.90516.21925.050
改进的邻域平均0.2750.2750.2750.2750.2750.2750.2750.275
传统的高斯滤波窗0.3970.7001.7854.5428.68014.29622.53637.025
改进的高斯滤波窗0.2750.3160.4120.5630.7140.8511.0161.222

　　图1和图3是两幅照明不均的图象，图2和图4是经过同态滤波处理后的图象。这里采用的是空域同态滤波算法，并且用改进的高斯滤波窗算法来实现其中的低通滤波，滤波窗大小分别选为5×5和7×7，滤波前乘上的入射光常量i0选为10。 
　　　　
图1　原图象　　　图2　修正后图象
　　　　
图3　原图象　　　　　　　图4　修正后图象
4　结论
　　由以上的分析和实验可以得知，用频域算法进行同态滤波存在占用存储空间大，无法得到局部效果，运算时间较长三个缺点，所以现在的常见做法是在空间域上进行同态滤波，空域同态滤波能克服频域同态滤波的前两个缺点，但其用来实现低通滤波的传统算法的效率也比较低，于是我们采用滑窗思想来改进传统的邻域平均算法，同时利用模板分解思想来改进传统的高斯滤波窗算法，两个改进算法都比原来的传统算法的效率有较大提高。
　　根据上面的实验数据可以看出，在滤波模板比较小的时候，两种传统的空域同态滤波比频域同态滤波速度要快一些，随着滤波模板的增大，传统空域同态滤波花费的时间的增长速度也越来越大。而同时我们看到，两种空域同态滤波的改进算法的效率却有显著提高，利用滑窗思想对邻域平均作的改进算法的时间复杂度不随滤波模板的增大而增大，它与滤波模板的大小无关；利用模板分解思想对高斯滤波作的改进算法的速度也较原算法有较大提高。
　　滑窗思想可在均值滤波和中值滤波中得到应用，而模板分解思想则可以在用方向对称模板进行线性滤波时得到普遍应用。
闻莎(四川大学计算机学院图象图形研究所 成都 610064)
游志胜(四川大学计算机学院图象图形研究所 成都 610064)
参考文献
1 赵荣椿等编著. 数字图象处理导论. 西安：西北工业大学出版社, 1995年
2 游志胜, 杨红雨, 张 磊等. 大模板线性滤波的空域快速计算. 四川大学图象所
3 张远鹏, 董 海, 周文灵编著. 计算机图象处理技术基础. 北京：北京大学出版社
4 Blair Mackiewich. Intracranial Boundary Detection and Radio Frequency Correction in Magnetic Resonance Image, 1995
收稿日期：1999年9月6日
