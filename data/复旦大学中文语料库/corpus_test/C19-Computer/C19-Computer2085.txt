计算机工程
COMPUTER ENGINEERING
1999年 第25卷 第10期 Vol.25 No.10 1999



Oracle基于Client/Server的性能调整
张冬　王鸿　姚耀文
摘要：通过探讨和研究Oracle服务器和Client/Server的特点和原理，阐述了提高、调整Oracle应用系统性能的一些原则和方法。
关键词：Oracle；客户/服务器；系统全程区；网络I/O；回滚段
Oracle Performance Tunign Based on Client/Server
Zhang Dong Wang Hong Yao Yaowen
(1.Dep.of Computer Sciences and Engineering.South China University of Technology,Guangzhou 510641;2.Dept.of Informatics,Guangzhou School of Finauce,Guangzhou 510521)
【Abstract】In this paper discuses and studies the characteristic of Oracle service and theory about Oracle service based on Client/Server.It also gives the way to improve and ture the performance of Oracle based on Client/Server
【Key words】Oracle;Cclient/Server;SGA;Network I/O;Rollback Segment
　　Oracle 数据库广泛应用在社会的各个领域，特别是在Client/Server模式的应用，但是应用开发者往往碰到整个系统的性能随着数据量的增大显著下降的问题，为了解决这个问题，从以下几个方面：数据库服务器、网络I/O、应用程序等对整个系统加以调整，充分发挥Oracle的效能，提高整个系统的性能。
1  调整数据库服务器的性能
　　Oracle数据库服务器是整个系统的核心，它的性能高低直接影响整个系统的性能，为了调整Oracle数据库服务器的性能，主要从以下几个方面考虑：
1.1  调整操作系统以适合Oracle数据库服务器运行
　　Oracle数据库服务器很大程度上依赖于运行服务器的操作系统，如果操作系统不能提供最好性能，那么无论如何调整，Oracle数据库服务器也无法发挥其应有的性能。
1.1.1  为Oracle数据库服务器规划系统资源
　　据已有计算机可用资源,  规划分配给Oracle服务器资源原则是：尽可能使Oracle服务器使用资源最大化,特别在Client/Server中尽量让服务器上所有资源都来运行Oracle服务。
1.1.2   调整计算机系统中的内存配置
　　多数操作系统都用虚存来模拟计算机上更大的内存，它实际上是硬盘上的一定的磁盘空间。当实际的内存空间不能满足应用软件的要求时，操作系统就将用这部分的磁盘空间对内存中的信息进行页面替换，这将引起大量的磁盘I/O操作，使整个服务器的性能下降。为了避免过多地使用虚存，应加大计算机的内存。
1.1.3  为Oracle数据库服务器设置操作系统进程优先级
　　不要在操作系统中调整Oracle进程的优先级，因为在Oracle数据库系统中，所有的后台和前台数据库服务器进程执行的是同等重要的工作，需要同等的优先级。所以在安装时，让所有的数据库服务器进程都使用缺省的优先级运行。
1.2  调整内存分配
　　Oracle数据库服务器保留3个基本的内存高速缓存，分别对应3种不同类型的数据：库高速缓存，字典高速缓存和缓冲区高速缓存。库高速缓存和字典高速缓存一起构成共享池，共享池再加上缓冲区高速缓存便构成了系统全程区(SGA)。SGA是对数据库数据进行快速访问的一个系统全程区，若SGA本身需要频繁地进行释放、分配，则不能达到快速访问数据的目的，因此应把SGA放在主存中，不要放在虚拟内存中。内存的调整主要是指调整组成SGA的内存结构的大小来提高系统性能，由于Oracle数据库服务器的内存结构需求与应用密切相关，所以内存结构的调整应在磁盘I/O调整之前进行。
1.2.1 库缓冲区的调整
　　库缓冲区中包含私用和共享SQL和PL/SQL区，通过比较库缓冲区的命中率决定它的大小。要调整库缓冲区，必须首先了解该库缓冲区的活动情况，库缓冲区的活动统计信息保留在动态性能表v$librarycache数据字典中，可通过查询该表来了解其活动情况，以决定如何调整。
　　Select sum(pins),sum(reloads) from v$librarycache;
　　Pins列给出SQL语句，PL/SQL块及被访问对象定义的总次数；Reloads列给出SQL 和PL/SQL块的隐式分析或对象定义重装载时在库程序缓冲区中发生的错误。如果sum(pins)/sum(reloads) ≈0，则库缓冲区的命中率合适；若sum(pins)/sum(reloads)>1, 则需调整初始化参数 shared_pool_size来重新调整分配给共享池的内存量。
1.2.2 数据字典缓冲区的调整
　　数据字典缓冲区包含了有关数据库的结构、用户、实体信息。数据字典的命中率，对系统性能影响极大。数据字典缓冲区的使用情况记录在动态性能表v$librarycache中，可通过查询该表来了解其活动情况，以决定如何调整。
　　Select sum(gets),sum(getmisses) from v$rowcache;
　　Gets列是对相应项请求次数的统计；Getmisses 列是引起缓冲区出错的数据的请求次数。对于频繁访问的数据字典缓冲区，sum(getmisses)/sum(gets)<10%～15%。若大于此百分数，则应考虑增加数据字典缓冲区的容量，即需调整初始化参数shared_pool_size来重新调整分配给共享池的内存量。
1.2.3 缓冲区高速缓存的调整
　　用户进程所存取的所有数据都是经过缓冲区高速缓存来存取，所以该部分的命中率，对性能至关重要。缓冲区高速缓存的使用情况记录在动态性能表v$sysstat中，可通过查询该表来了解其活动情况，以决定如何调整。
　　Select name,value from v$sysstat where name in ('dbblock gets','consistent gets','physical reads');
　　dbblock gets和consistent gets的值是请求数据缓冲区中读的总次数。physical reads的值是请求数据时引起从盘中读文件的次数。从缓冲区高速缓存中读的可能性的高低称为缓冲区的命中率，计算公式：
　　Hit Ratio=1-(physical reds/(dbblock gets+consistent gets))
　　如果Hit Ratio<60%～70%，则应增大db_block_buffers的参数值。db_block_buffers可以调整分配给缓冲区高速缓存的内存量，即db_block_buffers可设置分配缓冲区高速缓存的数据块的个数。缓冲区高速缓存的总字节数=db_block_buffers的值*db_block_size的值。 db_block_size 的值表示数据块大小的字节数，可查询 v$parameter 表：
　　select name,value from v$parameter where name='db_block_size';
　　在修改了上述数据库的初始化参数以后，必须先关闭数据库，在重新启动数据库后才能使新的设置起作用。
1.3  调整磁盘 I/O
　　磁盘的I/O速度对整个系统性能有重要影响。解决好磁盘I/O问题，可显著提高性能。影响磁盘I/O的性能的主要原因有磁盘竞争、I/O次数过多和数据块空间的分配管理。
　　为Oracle数据库服务器创建新文件时，不论是表空间所用的数据文件还是数据事务登录所用的日志文件，都应仔细考虑数据库服务器上的可用磁盘资源。如果服务器上有多个磁盘，则可将文件分散存储到各个可用磁盘上，减少对数据库的数据文件及事务日志文件的竞争，从而有效地改善服务器的性能。对于不同的应用系统都有各自的数据集，应当创见不同的表空间分别存储各自应用系统的数据，并且尽可能的把表空间对应的数据文件存放在不同的磁盘上，这种从物理上把每个应用系统的表空间分散存放的方法，可以排除两个应用系统竞争磁盘的可能性。数据文件、事务日志文件分别存放在不同的磁盘上，这样事务处理执行的磁盘访问不妨碍对相应的事物日志登记的磁盘访问。如果有多个磁盘可用，将两个事物日志成员放在不同的磁盘驱动器上，就可以消除日志文件可能产生的磁盘竞争。应把一个应用的表数据和索引数据分散存放不同表空间上，并且尽量把不同类型的表空间存放在不同磁盘上，这样就消除了表数据和索引数据的磁盘竞争。
1.4  调整数据库服务器的回滚段
　　回滚段是一个存储区域，数据库使用该存储区域存放曾经由一个事务更新或删除的行的原始数据值。如果用户要回滚一个事务所做的改变，那么数据库就从回滚段中读回改变前的数据并使该事务影响的行改变为它们的原状态。回滚段控制着数据库处理事务的能力，因而在数据库成功中起着关键性的作用，不管数据库的其它部分设计得多好，如果它设计得不合理，将会严重影响系统的性能。建立和调整回滚段的原则如下。
1.4.1 分离回滚段
　　分离回滚段是指单独为回滚段创建一个以上的表空间，使回滚段与数据字典、用户数据、索引等分离开来。由于回滚段的写入与数据和索引的写入是并行进行的，因此将它分离出来可以减少I/O争用。如果回滚段与数据不分离，倘若要某个表空间脱机或撤消，那么在该表空间中的各个回滚段没有全部脱机之前，不能将这个表空间脱机或撤消。而一旦该表空间不可用，则该表空间中的所有回滚段也不能使用，这将浪费所有分配的磁盘空间。所以，独立回滚段可使数据库管理变得容易。回滚段的经常性收缩，使得表空间的自由块更容易形成碎片。分离回滚段可以减少数据库表空间的碎片产生。
1.4.2 创建不同大小的回滚段群
　　对于一些联机事物处理，他们一般是频繁地对少量数据进行修改，创建许多小的回滚段对之有利。每一个事物的入口项只能限于一个回滚段，回滚段应该充分大以容纳一个完整的事物处理，因此对一些较大型事物，需要较大型的回滚段。极个别脱机处理事物会产生大量的回滚信息，这时需要一个特大号的回滚段来处理。根据这些理论，在Oracle数据库服务器中针对上述3种事物处理创建三组：小事物组、较大事物组、特大事物组等大小不同的回滚段群，并且将之分散到3个不同的表空间上，群内大小相同，应能满足该组事物处理的最大要求。
1.4.3 创建数量适当的回滚段
　　一般回滚段数量与并发事物个数有关，以下给出由于并发事物个数而应建立回滚段的参考数：
并发事物（n）　　　回滚段数
n<16　　　　　　　　4
16 ≤ n<32　　　　　8
n≥ 32　　　　　　n/4
2  调整 Client/Server 模式下的网络 I/O
　　Client/Server环境中的应用处理是分布在客户应用程序和数据库服务程序之间的。在 Client/Server环境中Client与Server之间的网络I/O是整个系统性能提高的瓶颈，一个客户应用程序引起的网络I/O越少，应用及整个系统的性能越好。减少网络I/O的最重要的一条原则：将应用逻辑集中在数据库服务器中。
2.1  使用Oracle数据库的完整约束性
　　当为应用建表时，应当为一些有特殊要求的数据加上适当的完整性约束，这样就能实现由数据库本身而不是应用程序来约束数据符合一定的条件。数据库服务器端的完整约束的执行操作是在比SQL语句级别更低的系统机制上优化，它与客户端无关，只在服务器中运行，不需在Client 端和Server端之间传递SQL语句，有效地减轻网络I/O负担。
2.2  使用数据库触发器
　　完整约束性只能实现一些较简单的数据约束条件，对一些较复杂的事物处理规则就无能为力，这时最好不要在应用程序中实施复杂的程序控制，而是应当采用数据库触发器来实施复杂的事物规则。数据库触发器能实现由数据库本身，而不是应用程序，来约束数据符合复杂的事物处理规则，并且容易创建，便于管理，避免大量的网络I/O。
　　例如：将当前表A中成为历史的记录从A表中转储到历史表B中，表示为Lsbs。
在应用程序中实现：　　　　　　　用数据库触发器实现：
Beign　　　　　　　　　　　　　　Create trigger delete1
　Update A set lsbs='T';　　　　　　　After update of lsbs on A
　Insert into B　　　　　　　　　　　For each row
　Select * from A where lsbs='T';　　　   Insert into B
　Delete A where lsbs='T';　　　　　　select * from A where :new.lsbs='T';
End;　　　　　　　　　　　　　　 Delete A where :new.lsbs='T';
　　　　　　　　　　　　　　　　End delete1; 
　　在应用程序中实现时，所有的SQL命令请求传送的数据都要通过网络在Client端和Server端进行交换，而不像数据库触发器一样，SQL本身在Server端，不需要通过网络传输数据。当进行操作的数据量相当大时，并且多个用户同时操作时，通过在应用程序中实现复杂的控制，必将增大网络I/O的负荷，使整个系统的性能降低，而用数据库触发器能完全避免这种情况发生。
2.3  使用存储过程、存储函数和包
　　Oracle的存储过程和存储函数是命名的能完成一定功能并且存储在Server端的PL/SQL的集合。包是一种把有关的过程和函数组织封装成一个数据库程序单元的方法。它们相对于应用程序的过程、函数而言，把SQL命令存储在Server端。使用存储过程和存储函数，应用程序不必再包含多个网络操作的SQL语句去执行数据库服务器操作，而是简单调用存储过程和存储函数，在网络上传输的只是调用过程的名字和输出结果，这样就可减少大量的网络I/O。
　　例如：基表A、B的定义：name char(20)；detail char(10)；A表100万记录，应用程序将从基表A中检索detail列符合给出条件的记录，并将之插入基表B。
　　Declare
　　Cursor cursor1 is select*from A;poin cursor1%type；
　　　　　con1 number(2);res1 char(4)='abcd';
　　Begin　Insert into B values(poin.name,poin.detail);end if;
　　 For poin in cursor1 loop　　　End loop;End loop;
　　  For con1 in 1..7 loop　　　　Commit;
　　　If substr(poin.detail ,con1,4)=res1 then End;
　　如果在Developer/2000 From中按钮触发器直接用PL/SQL实现和把它改写为一个Oracle存储过程，然后在From中调用此过程实现比较，后者性能显著提高。
　　在考虑使用上述3种方法时：首先考虑使用完整约束性。对于数据库触发器和存储过程，如果需要所有访问数据库的程序自动实施一定规则或检查，那么使用数据库触发器；如果只需对少数的程序实施一定的规则或检查，则可创建一个过程，让有关程序调用这个过程。
3  应用程序的调整
3.1 SQL语句的优化
　　SQL语句的执行速度，可以受很多因素的影响而变化。但主要的影响因素是：驱动表、执行操作的先后顺序和索引的运用。可以由很多不同的方法间接地改变这些因素，以达到最优的执行速度。这里主要探讨当对多个表进行连接查询时应遵循的优化原则：
　　(1)  用于连接的子句的列应被索引、在Where子句中应尽量利用索引，而不是避开索引。
　　(2)  连接操作应从返回较少行上驱动。
　　(3)  如果所连接的表A和B，A表长度远远大于B表，建议从较大的A表上驱动。
　　(4)  如果Where子句中含有选择性条件,Where No=20，将最具有选择性部分放在表达式最后。
　　(5)  如果只有一个表有索引，另一表无索引，无索引的表通常作为驱动表。如A表的No列以被索引，而B表的No 列没被索引，则应当B表作为驱动表，A表作为被驱动表。
　　(6)  若用于连接的列和Where子句中其他选择条件列均有索引，则按各个索引对查询的有效性和选择性分别定出级别，结合表中具体数据构成情况，从中选出优化路径，一般需要考虑：子句中哪些列可以使用索引、哪些索引具有唯一性及被查询表行数目等。
3.2  建立和使用视图、索引
　　利用视图可以将基表中的列或行进行裁减、隐藏一部分数据，并且能够将涉及到多个表的复杂查询以视图的方式给出，使应用程序开发简洁快速。利用索引可以提高查询性能，减少磁盘 I/O，优化对数据表的查询，加速SQL语句的执行。但任何时候建立索引都能提高性能，何时建立索引应当遵循以下原则：该表常用来在索引列上查询，该表不常更新、插入、删除等操作，查询出来的结果记录数应控制在原表的2%～4% 。
3.3  使用 Oracle 的数组接口
　　当一个客户应用程序插入一行或用一个查询来向服务器请求某行时，不是发送具有单个行的网络包，而是采用数组处理，即把要插入的多个行或检索出的多个行缓冲在数组中，然后通过很少的几个包就可在网上传送这些数组。例如，一个给定的Select语句返回2000行数据，每行平均大小为40个字节，数据包的大小为4kB，而数组大小参数(arraysize)设置为20 ，则需从服务器发送100个数据包到客户机。如果简单地把(arraysize)设置为2000，那么同样的操作只需要传送 20个数据包。这样就减少了网络的传输量，提高了所有应用的性能。
4  总结
　　我们在开发应用程序时，遵循上述的方法和原则，对系统进行调整，收到了令人满意的效果。但是应当指出，由于客户机、网络、服务器这3个相互依存的组成部分都必须调整和同步才能产生最佳的性能，因此还应根据系统的具体情况，具体分析和调整。
作者简介：张冬（1972～），男，研究生，主研方向：数据库
作者单位：张冬　姚耀文（华南理式大学计算机工程与科学系，广州510641）
　　　　　王鸿（广州金融高等专科学校信息系，广州市510521）
参考文献
1 Bobrowski S M.Mastering Oracle7&Client/Server Computing.北京：电子工业出版社,1996
2 孙宏昌.Oracle数据库管理员教程.北京：电子工业出版社，1996
3 北方交通大学自动化系统研究所.Oracle7使用技巧.北京：科学出版社，1996
收稿日期：1999-01-04
