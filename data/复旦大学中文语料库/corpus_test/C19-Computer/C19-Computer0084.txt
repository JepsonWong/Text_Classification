计算机工程
COMPUTER ENGINEERING
1999年 第25卷 第8期 Vol.25 No.8 1999



基于事件驱动的多媒体同步与链接机制
余阳，蔡少书，黄欣
摘要：结合面向对象技术，提出了基于事件驱动的多媒体同步与链接机制，在控制的灵活性与对用户的友好性方面具有其独特的优点。
关键词：多媒体；超级媒体；同步；链接；事件驱动
Multimedia Synchronization & Chaning Mechanism Based on Event-driven
Yu Yang,Cai Shaoshu,Huang Xin
(Research Center for Electronical Mechanism,Zhongshan University,Guangzhou 510275)
【Abstract】This paper presents the Multimedia Synchronization & Chaining Mechanism Based on Event-driven,which leads to more flexible control and friendly user interface.
【Key words】Multimedia;Hypermedia;Synchronization;Chaining;Event-driven
　　所说的基于事件驱动的多媒体同步与链接机制是一种基于面向对象的方法。它将面向对象的思想进一步强调，并一致性地贯彻始终。它将所有的多媒体元素 ( 图、文、声、动画、视频等 ) 以及控制性元素 ( 如：按钮、时钟等 ) 均看作是独立的对象，对象的活动产生事件，而事件又可触发对象的动作或节点间的转移关系 ( 顺序、跳转、循环等 ) 。事件是节点中对象同步与节点间转移 ( 链接 ) 的唯一动力。从用户的观点来看，一个节点就像一出戏剧中的一幕，一个个的对象就是布景、道具、人物……，而用户本身就是整出戏的导演。它通过角色的动作协调它们的关系以及一幕的结束，下一幕的开始。 
1 基本概念及其语言描述 
1.1 基本概念的定义 
　　(1) 对象：它是系统中最基础的概念，包括媒体对象和控制对象．媒体对象是能够单独播放的基本元素，如： AVI 视频文件、 FLIamp;FLC 动画文件、 MPEG 文件、 WAV 文件、实时视频、文字、图象等等。控制对象是用来控制媒体对象动作的基本元素，如；按钮、定时器等。 
　　每个对象都有一组属性对它进行描述，既有文件名、播放位置、字体等静态属性，又有打开、播放、暂停、关闭等动态属性。可以将对象看作演员、道具、信号等，静态属性描述其外貌、位置，而动态属性描述其动作能力。 
　　(2) 节目：是一组在时间上有同时性、或空间上有交叠、或彼此间相互关联、有控制关系的对象的集合。它是系统控制播放的基本单位。 
　　可以直观地将节目比作文艺演出中的一个节目或戏剧中的一幕，它将演员、道具等在时空上紧密组合起来以表达一定的含义。 
　　(3) 节目单：是一组节目在控制结构 ( 如顺序、跳转、循环、定时 ) 的编排下形成的有序集合。若不考虑控制结构的多样性，可以将节目单类比文艺演出的＂节目单＂。 
　　(4) 事件：对象 ( 媒体对象、控制对象 ) 的活动产生事件，而一个事件可以引发一个或多个对象改变活动的方式 ( 如： PLAY 变为 FAST PLAY ， STOP 变为 REWIND 等等 ) 、或由非活动状态开始动作、或结束整个节目。目前，我们仅仅简化地定义了 3 类事件：所有媒体对象在播出结束时产生结束事件，定时器在时间到时产生定时事件，按钮被点击时产生点击事件。 
　　基于以上概念的定义，我们可以在一个节目中清晰地表达：＂节目开始即播放视频， 5 秒钟后叠加字幕，同时配音，视频播放完毕接着反复播放动画，若反复播放动画 10 秒仍未点击按钮 A ，则转向下一个节目；若点击了按钮 A ，则转向本节目单第一个节目。 
1.2 基本概念的语言描述 

图1 多媒体对象的类派生结构
　　基于面向对象技术，可以按图 1 所示的概念层次结构封装系统中的对象。高层节点称为低层节点的 “ 超类 ” 。低层节点称为高层节点的 “ 子类 ” 。超类派生子类，子类不但继承了其超类的属性和方法，还可以拥有自己独特的属性和方法。 
　　这里，用 C++ 语言举例描述其中的几个类： 
　　struct EVENT { 
　　int ObjectID; // 对象 ID 
　　int Action; // 动作 
　　long Para; // 参数 
　　EVENT *Next; // 下一个 EVENT 结构指针 
　　}; 
　　class Object 
　　{ 
　　public: 
　　long ObjectID;　 // 对象 ID, 由播放控制程序定义 . 
　　int Type;　　　　// 对象类型 
　　HWND hViewWin;　 // 对象播出窗口句柄 
　　UINT wDeviceID;　// 播出设备 ID 
　　int Top; 
　　int Left; 
　　int Bottom; 
　　int Right; 
　　bool Active; 　　// 是否处于活动态 
　　bool obPause;　　// 是否暂停 
　　. 
　　. 
　　. 
　　EVENT *Event;　　// 事件定义表指针 
　　Object *Next;　　// 下一个对象指针 
　　Object(); 
　　virtual ～ Object() {}; 
　　virtual DWORD Open() {}; 
　　virtual DWORD Play() {}; 
　　virtual DWORD Pause() {}; 
　　virtual DWORD Resume() {}; 
　　virtual DWORD Stop() {}; 
　　virtual DWORD Seek(DWORD cmd,DWORD loc) {}; 
　　virtual DWORD Close() {}; 
　　}; 
　　class MCI_Object: public Object 
　　{ 
　　public: 
　　DWORD SFrame;　　// 开始帧 
　　DWORD EFrame;　　// 终止帧 
　　. 
　　. 
　　. 
　　MCI_Object(); 
　　virtual ～ ~MCI_Object() {}; 
　　virtual DWORD Open() {}; 
　　virtual DWORD Play() {}; 
　　DWORD Pause(); 
　　DWORD Resume(); 
　　DWORD Stop(); 
　　DWORD Seek(DWORD cmd,DWORD loc); 
　　DWORD Close(); 
　　}; 
　　class ImgTxt_Object: public Object 
　　{ 
　　public: 
　　int InEffect; // 进入时过场效果 
　　int OutEffect; // 退出时过场效果 
　　int Delay; // 入场后停留时间 
　　. 
　　. 
　　. 
　　ImgTxt_Object(); 
　　virtual ～ ~ImgTxt_Object() {}; 
　　virtual DWORD Open() {}; 
　　DWORD Play(); 
　　DWORD Pause(); 
　　DWORD Resume(); 
　　DWORD Stop(); 
　　DWORD Seek(DWORD cmd,DWORD loc); 
　　DWORD Close(); 
　　}; 
　　节目是由一系列对象组成的，可以用对象组成的链表表示： 
　　　　Object * Scene ； 
　　链表中对象的先后关系隐含着对象在空间上的前后关系，用于处理对象在空间上的叠加。 
　　在我们的系统中，节目是播放的基本单位，以上是播放级概念的数据结构，无须对节目单进行描述。在用户交互级，用关系数据库记录用户对节目单、节目、对象、属性的描述，并在播放控制级实时将数据库的内容通过一个中间描述层转换为播放级的结构。 
2 同步与链接机制的实现 
　　在具体实现这种基于事件的同步与链接机制时，考虑到其自身的特点及复杂性分解、功能独立、易扩展等技术要求，我们将系统的实现划分为两大模块：多媒体播放器及播放控制器。 
2.1 多媒体播放器与对象同步机制 
　　多媒体播放器的任务是具体实施一个节目的播放。它必须处理一个节目中各对象在空间上的叠加和在时间上的同步。首先，它通过 DDE 接收播放控制器传来的一个节目中各对象的形式化描述，并将其转化到自身的数据结构中存储起来。接着，将处于活动状态的对象 (Active=true) 投入运行。这时，播放器处于事件监控状态。在 Windows 系统中， “ 事件 ” 的具体表现形式是消息。当活动的对象有消息 ( 事件 ) 传来，播放器就根据该消息附带的对象类型 (Type) 和播出设备标识 (wDeviceID) 匹配对象链，找到发出消息的对象，并取出其事件定义表。根据该表的内容，去改变当前活动对象的动作，或启动一个处于非活动状态的对象。为了提供结束该节目的手段并与链接机制相衔接，我们定义了一个特殊的对象： System ，它具有顺序 (Next) 、跳转 (Jump) 、循环 (Loop) 等动态属性。一旦有事件触发了该对象，播放器即关闭所有正在活动的对象，结束该节目的执行，并将 System 的动作传给播放控制器，由它具体实施。 
2.2 播放控制器与节点链接机制 
　　播放控制器的主要任务是将用户定义的节目单解释到节目一级，并将一个节目的所有对象属性转化为一种形式化描述，通过 DDE 提交给多媒体播放器。要做到这一点，播放控制器必须解释节目单中的顺序、跳转、循环等控制结构。为了满足用户需要，我们还提供了子节目单、定时插播、手工插播等控制结构。由于采用了关系数据库存放与用户交互的数据，使得播放控制器可以利用数据库的成熟技术方便地进行查询、定位等操作，为功能的实现提供了坚实可靠的技术保证。在控制器与播放器之间，我们以 DDE 为基础，定义了一个简单有效的通信协议，以保障命令、数据、状态的有效传递。图 2 简要地图示了这种协议。 

图2 节目单传送协议
　　通过多媒体播放器与播放控制器的分离，不但有效地控制了整个系统的复杂性，还为我们对系统进行进一步的性能改进和功能扩充预留了广阔的发展空间。如：通过对通信协议的改进，可以实现节目数据的预传送，进一步提高系统性能。通过对用户界面和控制器的改造，可以快速地响应用户需求，定制出不同领域的专用多媒体编播工具。 
3 应用实例 
　　我们应用前述概念和原理，具体实现了一个多媒体编播控制系统 MEDS 。它通过所见即所得的交互界面将用户编导的节目单、节目、对象数据存储于多媒体信息数据库，由播放控制器解释节目单中的控制结构，并将分离出的节目数据通过 DDE 实时传送给播放器，协同完成节目单的播放。统计报表子系统将播放控制器记录的播放情况 ( 每个节目播出的时间、频率、最大间隔、被中断次数等等 ) 形成报表提交用户。 MEDS 的软件结构如图 3 所示。

图3 MEDS软件结构图
　　目前， MEDS 主要用于本单位开发的 LED 大屏幕显示系统的编播控制，适用于广告宣传、娱乐等领域。已应用于国内多项工程，并出口到美国、英国、比利时、马来西亚等多个国家和地区。其强大的功能和易用性受到用户的广泛赞誉。 
　　以多媒体播放器及其形式化描述界面为核心，针对不同的用户要求，通过用户界面及控制器的用户化，可以构建各种业务信息的实时发布系统。目前我们已开发出面向火车站、机场、体育场等的用户系统。相信经过进一步的开发和完善，其应用领域会不断拓宽。 
作者单位：中山大学电子机械研究中心，广州 510275
参考文献 
1 蔡茂国 , 肖自美 . 面向对象的超级媒体技术 . 全国第四届多媒体技 术学术会议论文集 , 1995-11 
2 柯清超 . 基于时间轴的多媒体演示系统的设计 . 全国第七届多媒 体技术学术会议论文集 , 1998-10 
3 杨士强 , 张国光 . 实用多媒体系统的著作工具 . 全国第四届多媒体 技术学术会议论文集 , 1995-11 
