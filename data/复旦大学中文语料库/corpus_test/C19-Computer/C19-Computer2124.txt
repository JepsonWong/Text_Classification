计算机工程
COMPUTER ENGINEERING
1999年 第25卷 第12期 vol.25 No.12 1999



BDEGATE:一个数据库网关原型的研究与构造
王雪平　刘松鹏　张　峰　张根度
　　在分布式的计算环境中，采用传统的客户机/服务器模式在访问远程数据库时，必须安装和配置数据库访问接口。这种配置复杂性使得系统使用不便，系统的支持和维护费用偏高。随着系统的扩大，系统变得越来越复杂：在每一个需要访问远程数据库的客户机上都需要安装和设置数据库访问接口，这可能会导致这些接口之间的不一致；而且一旦需要升级该数据库接口，那么每台客户机上都必须重新安装，系统将变得不可以接受。另外，对不同的数据库访问，用户的访问权限是由数据库系统决定的，应用系统无法提供额外的数据库安全机制来监测客户对数据库的访问。而且随着应用的深入与趋于复杂，对数据库访问的功能和性能要求就越高。很明显，当前应用中所采用的方法已不能很好地满足应用的要求。
　　为此，本文提出了一种数据库网关形式的数据库接口在分布式客户机/服务器应用的新方法，并开发了一个数据库网关原型BDEGATE(Borland Database Engine Gateway)。通过构造数据库网关，把数据库接口的复杂性集中在服务器上，降低客户端的数据库接口的复杂性，增强分布式C/S应用程序的可维护性，增加对数据库安全的控制，并支持与多种数据库的接口。目前，分布式客户机/服务器上实现对数据库访问的接口大致可以分为以下3种。
　　(1) 专用数据库接口API
　　数据库厂商纷纷推出各自的专用的数据库接口API。这种专用数据库接口API常常是以嵌入式语言的形式存在。其特点是数据库访问效率高，但是开发效率极低。而且不同数据库厂商的API之间根本不存在可互操作性。用这种专用API开发的应用程序在后台数据库改变时，有可能不得不重新开发。总之，专用数据库的接口方案都与各自的数据库产品紧密集成，因而无论在效率、性能还是安全性方面都达到了理想的水平，但也正是由于这种紧密集成，导致了他们只能局限在各自的数据库产品之上，所以兼容性和可移植性差。
　　(2) Microsoft公司的开放数据库互连ODBC(Open Database Connectivity)Microsoft
　　公司的开放数据库互连是一种数据库中间件技术和通用的数据库接口。开放数据库互连是用来执行SQL(Structured Query Language)语句的应用程序接口，它由一组开放数据库互连接口和规范组成，易于向任何关系数据库发送SQL语句，从而支持对多种数据库的访问；C++，VB等都支持开放数据库互连接口。运用开放数据库互连接口，只需要写出一个程序就能够给相应的数据库发送数据库请求。开放数据库互连，作为一种通用的数据库接口，具有访问不同类型的数据库的能力；同时也因为其通用性而大大地限制了其数据库访问的效率。而且使用开放数据库互连，必须在运行客户程序的机器上安装一个ODBC的驱动程序，而且还要配置ODBC。这样极大地增加了分布式的客户/服务器应用的复杂性和影响其可维护性。
　　(3) Borland公司的数据库引擎
　　BDEBorland公司的数据库引擎也是一种数据库中间件技术。与开放数据库互连相类似，数据库引擎也是用来执行SQL语句的应用程序接口，由一组数据库引擎接口组成，易于向任何关系数据库发送SQL语句，从而支持对多种数据库的访问。与开放数据库互连不同的是，数据库引擎支持与多种数据库的直接连接，因而效率问题得到解决。但还是必须在运行客户程序的机器上安装一个数据库引擎的驱动程序，而且还要配置BDE。这样极大地增加了分布式的客户机/服务器应用的复杂性和影响其可维护性。
1 数据库网关方法的提出
　　按照通常的方式，在开发分布式的客户机/服务器应用时，涉及到远程数据库访问时往往采用开放数据库互连方法或数据库引擎方法。在使用VB或C++开发应用程序时，开放数据库互连是首选的方法；在使用Delphi开发时，数据库引擎是最合适的选择。但是无论是使用开放数据库互连还是使用数据库引擎，在应用运行的主机上必须安装一个开放数据库互连接口(通常是ODBC)或安装一个数据库引擎(通常是BDE)；此外，还需要配置相应的数据库接口或数据库引擎。在一个本地集中的应用环境中，这种方案是可行的。然而，在一个分布的应用环境中，尤其是跨地域的应用环境中，这种方案的可行性值得怀疑：系统的复杂性急剧增加，系统的可维护性大大降低。
　　如果在分布的应用环境中，在访问数据库时也无须在本机上配置数据库访问接口，如上所述的制约系统因素将不复存在，从而大大提高系统的可维护性和降低系统的复杂性。设计数据库网关的目的就在于此：在客户机上实现数据库访问的零配置方案，把数据库接口的复杂性集中在数据库服务器上；同时加入适当的安全控制策略，增强系统的安全性。
2 数据库网关原型BDEGATE的设计思想
　　我们设计和实现的数据库网关的基本结构如图1所示。分为两大部分：一部分是基于服务器的数据库网关服务管理器DBGSM(Database Gateway Service Manager)；另外一部分则是基于客户的数据库存取界面(DB interface)。 其中DBGSM是一个服务进程，是前端的客户和后端的数据库之间通信的桥梁(这也是网关的来历)。每个客户首先必须和DBGSM建立连接。在连接时，DBGSM进行安全检查。只有通过安全检查的客户才能与DBGSM建立连接，从而获得DBGSM的数据库网关服务；否则，DBGSM将拒绝客户的请求。在建立连接后，DBGSM服务充当客户和数据库之间的代理：客户把SQL语句送到DBGSM服务，然后DBGSM服务透明地把该SQL语句提交给数据库连接；数据库服务器执行SQL语句后，把结果通过数据库连接返回给DBGSM，然后由DBGSM把结果返回给客户。数据库存取界面仅仅包含了两个对象：RemoteDataBase和FrontDataSet对象；从而为访问远程数据库提供了方便。

图1数据库关BDEGATE的基本结构
　　整个数据库网关的体系结构采用的是三层(Three-tier)客户机/服务器模型。数据库网关与各个客户的数据通信采用流套接字(Stream Socket)机制实现，并且利用了多线程的优点，使得数据库网关与各个客户的套接字通信能够并发地进行。数据库网关与后端数据库的接口采用了数据库引擎 (BDE)，它们之间是通过标准的SQL语言进行通信的。在客户端，利用对象技术，把下层的实现隐藏起来，提供给用户一个容易使用的界面。
3 数据库网关原型BDEGATE的实现
　　根据这个数据库网关的设计思想，选择了Delphi 3.0作为开发工具，把BDEGATE作为一个服务在Windows NT下实现。Delphi已经成为最受欢迎的数据库应用开发的工具，而且Delphi 3.0提供了面向对象的Pascal语言，支持面向对象程序的开发，还支持应用构件的开发。在BDEGATE的客户端中，我们就利用构件技术，开发了两个构件：TRemoteDatabase 和TFrontDataSet，从而使得客户端的应用开发非常简单：无论从概念还是编程，都和使用传统的编程方法一样。在实现数据库网关BDEGATE的过程中采用了下面的关键技术。
3.1 数据库引擎BDE
　　数据库引擎BDE是一个由Borland公司开发的独立于数据库管理系统DBMS的数据库接口，即一个通用的SQL数据库访问框架，它对于不同的数据库使用了统一的接口。使用数据库引擎BDE，程序员只需要写一个数据库接口，不需要重新编码就能够访问任何数据源。数据库引擎BDE支持直接的数据库访问，其效率远比开放数据库互连高。当前数据库引擎BDE支持的数据库接口有：Windows NT Server上的Microsoft SQL Server，Sybase SQL Server，SCO UNIX平台上的Informix，OS/2 Warp Server平台上的DB2等。此外还提供对开放数据库互连数据源的支持。使用数据库引擎，可以实现对一种数据库的访问。
　　客户端发送过来的SQL语句最终通过数据库引擎BDE来执行。因此用户在指定SQL语句的同时必须指定连接的BDE的别名，以及用于身份认证的用户名和用户口令。
3.2 流套接字
　　传输控制协议TCP(Transfer Control Protocol)提供了一种可靠的端对端的通信通道，客户机/服务器应用程序可以用它来进行通信。套接字是在网络上运行的两个程序之间的双向通信链路的一个端点。对应于TCP的套接字称为流套接字，它是面向连接的。服务器应用程序侦听特定端口，等待来自客户的连接请求。当一个连接请求到达时，客户与服务器之间建立一条专用连接，它们在这条连接上通信。在连接过程中，客户被分配一个本地端口号，并将一个套接字绑定到这个端口。客户通过向套接字写入消息以及从套接字读出来自服务器的信息的方式与服务器通信。与此类似，服务器也获得一个新的本地端口号(需要新的端口号是因为，这样，服务器就能够在原来的端口上继续侦听连接请求)。服务器也将一个套接字绑定到它的一个本地端口，并通过读写这个套接字与客户通信，客户和服务器必须使用相同的协议，也就是说，它们通过套接字来回传输信息时必须使用相同的语言。图2显示了流套接字的工作流程。

图2 流套接字的工作流程
　　我们利用流套接字，作为数据库网关下层通信的渠道。而且根据应用自身的需要，在流套接字上定义了通信协议，这些对上层用户是不可见的：在客户端，我们利用Delphi开发了两个数据库存取构件：TRemoteDatabase和TFrontDataset，用户无须关心下层通信协议。
3.3 多线程
　　线程是一个程序中单独的顺序化流程。多线程程序设计是指在单个程序中使用多个线程，这些线程在同一时间并发运行，执行不同的任务。在多线程程序中，各个线程需要共享数据。例如，一个线程向文件写入数据，而另一个线程要从这个文件中读数据。当多个线程共享数据时，需要将线程同步，以达到预期的结果。如果一个程序中有几个并发进程在竞争资源，就必须运用适当的同步机制来保证公平竞争。如果每个线程对于有限的资源能够有足够的访问时间来保证合理的进度，这个系统是公平的。
　　在数据库网关BDEGATE中，采用为每个客户提供一个服务线程的方式实现。在数据库网关中，主要包括4类线程：1).服务监听线程；2).服务线程；3).空闲管理线程；4).状态监控线程。其中监听线程、空闲管理线程和状态监控线程是服务器中始终存在的3个线程，服务线程是根据客户的请求而产生和消失的，其数量不定。图3显示了服务线程的工作流程。服务监听线程始终在监听服务请求。一旦有来自客户端的服务请求，服务监听线程就生成一个服务线程，传递必要的参数，然后继续监听请求。新生成的服务线程首先利用SSL对用户进行认证，然后根据认证结果继续运行。一旦连接建立起来后，客户就直接和相关的服务线程相关，而与其他的服务线程无关。空闲管理线程定期在后台运行，检查物理连接的使用状态，如某个物理连接已经长时间未用(超时)，则断开连接以释放资源。由于一个服务线程只为一个客户服务，失败的用户不会影响服务服务线程对其他客户的响应。

图3 服务线程的工作流程
3.4 安全机制
　　结合Windows NT操作系统的安全机制，采用SSPI (Secure Service Provider Interface)来传送用户信息和认证用户。在用户访问数据库时，先把用户的认证信息通过SSPI的客户端接口进行转换(相当于加密)，然后由下层的流套接字把转换的结果传送给服务线程；服务线程通过SSPI的服务端接口把认证信息送到操作系统上认证用户；最后服务端把认证的结果通过下层的流套接字返回给客户端。由于传送的是经过加密的认证信息，因而大大减少了用户认证信息泄密的可能性。在认证结束后，由BDEGATE在系统日志中写一条安全日志记录。如果系统认证成功，则允许用户建立连接，否则，不允许用户建立连接。在用户进行数据库访问时，先把用户信息映射成其数据库存取信息上，然后利用已经映射的数据库映射信息去访问数据库。通过这种安全机制，可以加入用户自己的安全策略，实际上大大增强了数据库系统访问的安全性，可靠性。
　　在编程实现数据库网关的过程中，特别注意了下面的几个问题。因为网络是不可靠的，客户程序同样不可靠，所以在BDEGATE加入了充分的出错处理(Exception Handling)机制。在出错后，把出错的原因尽可能地告诉客户端，让客户端了解系统的状态。
　　综上所述，在设计和实现数据库网关BDEGATE的过程中，运用了如下的关键技术：三层客户机/服务器模型；SQL；BDE；流套接字；多线程；SSPI支持的安全机制。
4 小结
　　我们设计和开发的数据库网关原型利用了数据库引擎BDE来进行数据库访问，使得可以访问各种数据库系统；采用了多线程技术，使得系统的健壮性得到了保证；采用SSPI，增加了额外的数据库访问安全机制。为了测试开发的数据库网关原型，我们编写一个简单的客户端测试程序，以及测试程序的安装程序。我们发现，在连接不同类型的数据库时，客户端的应用程序无须修改；使用TCP/IP网络上常用的协议分析器，也无法分析出用户访问数据库的认证信息；在连接多个客户端应用时，BDEGATE表现良好，资源消耗达到了理想的水平。
　　概括起来，该数据库网关的原型完成了下列功能：实现了客户端的零配置方案；降低客户端的数据库接口的复杂性；增强分布式客户机/服务器应用程序的可维护性，增加了数据库访问的安全机制；支持与多种关系数据库的连接。
作者单位：复旦大学计算机系，上海200433
参考文献
1 施伯乐，丁宝康，楼荣生. 数据库系统导论. 北京：高等教育出 版社，1994
2 徐新华. Delphi 3 编程指南. 北京：宇航出版社，1998
3 Minasi M，Anderson C，Creegan E. Windows NT Server 
4 从入 门到精通. 北京：电子工业出版社，1997
